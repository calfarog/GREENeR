#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
library(shinyjs)
library(dplyr)
library(plotly)
library(lubridate)
library(qpcR)
library(gtools)
library(chorddiag)

load("season.Rdata")

css <- "
#loading-content {
position: absolute;
background: #000000 url('images/loader_blue_transparent.gif') no-repeat 50% 50%;
opacity: 0.9;
z-index: 100;
left: 0;
right: 0;
height: 100%;
text-align: center;
color: #FFFFFF;
}
"

distanciaPases <- function(equipo, pases){

  p <- lapply(seq_len(length(pases)), function(i){
    teams <- team_events %>% filter(match_id == names(pases)[i])
    teams <- paste(teams$name, collapse = "-")
    paux <- plot_ly(pases[[i]], x = ~timestamp, y = ~distancia, type = "bar") %>%
      layout(title = paste("Distancia pases:", teams))

    eventosRelevantes <- key_events %>% filter(match_id == equipo$match_id[i], team_id == unique(equipo$id),
                                               type != "goal")
    eventosRelevantes <- eventosRelevantes %>% mutate("timestampEvent" = make_datetime(min = min, sec = sec))
    goles <- key_events %>% filter(match_id == equipo$match_id[i], type == "goal")
    goles <- goles %>% mutate("timestampEvent" = make_datetime(min = min, sec = sec))
    eventosRelevantes <- rbind(eventosRelevantes, goles)
    paux <- paux %>% add_segments(x = eventosRelevantes$timestampEvent,
                                  xend = eventosRelevantes$timestampEvent,
                                  y = -100,
                                  yend = 100,
                                  color = eventosRelevantes$type,
                                  line = list(width = 3))

    paux
  })

  p
}

dibujarAngulosPasesEquipo <- function(matchID, teamID){

  test <- pass_events %>%
    filter(match_id == matchID, team_id == teamID)

  test <- test %>%
    mutate(angle = atan((end_y - start_y)/(end_x - start_x)))

  test <- test %>% filter(player_id_2 != 0)

  test <- test %>%
    mutate(timestamp = make_datetime(min = min, sec = sec))

  #test_messi <- test %>% filter(player_id_1 == 19054)

  aux <- team_events %>% filter(id == teamID)
  team_name <- unique(aux$name)

  eventosRelevantes <- key_events %>%
    filter(match_id == matchID, team_id == teamID)

  eventosRelevantes <- eventosRelevantes %>%
    mutate("timestampEvent" = make_datetime(min = min, sec = sec))

  teams <- team_events %>% filter(match_id == matchID)
  teams <- paste(teams$name, collapse = "-")

  p <- plot_ly(test, x = ~timestamp, y = ~angle, type = "bar")
  p <- p %>%
    add_segments(x = eventosRelevantes$timestampEvent,
                 name = eventosRelevantes$type,
                 xend = eventosRelevantes$timestampEvent,
                 y = -2,
                 yend = 2,
                 color = eventosRelevantes$type,
                 line = list(width = 2)) %>%
    layout(title = paste("Angulos pases", team_name, "(", teams, ")"),
           yaxis = list(title = 'Pass angle (radians)'))

  p

}

anguloPases <- function(equipo){
  equipo <- team_events %>% filter(name == unique(equipo$name))
  p <- apply(equipo, 1, function(x){dibujarAngulosPasesEquipo(x[["match_id"]], x[["id"]])})
}

mapaCalor <- function(equipo, pases){
  a <- list(
    text = paste("Pases origen", unique(equipo$name)),
    xref = "paper",
    yref = "paper",
    yanchor = "bottom",
    xanchor = "center",
    align = "center",
    x = 0.5,
    y = 1,
    showarrow = FALSE
  )
  b <- list(
    text = paste("Pases destino", unique(equipo$name)),
    xref = "paper",
    yref = "paper",
    yanchor = "bottom",
    xanchor = "center",
    align = "center",
    x = 0.5,
    y = 1,
    showarrow = FALSE
  )

  dens <- lapply(pases, function(x){
    list("origen" = kde2d(x$start_x, x$start_y, n=100), "destino" = kde2d(x$end_x, x$end_y, n=100))
  })

  p <- lapply(seq_len(length(dens)), function(i){
    goles <- key_events %>% filter(match_id == names(dens)[i], type == "goal", team_id == unique(equipo$id))
    teams <- team_events %>% filter(match_id == names(dens)[i])
    a$text <- paste(a$text, "(", paste(teams$name, collapse = "-"), ")")
    paux1 <- plot_ly(z = dens[[i]]$origen$z, type = "heatmap", showscale = F, colors = colorRamp(c("green", "red")), alpha = 0.5) %>%
      layout(annotations = a)
    paux1 <- paux1 %>% add_trace(x = goles$x, y = goles$y, type = "scatter", mode = "markers",
                                 marker = list(color = "blue",
                                               size = 5,
                                               symbols = 'x'))

    b$text <- paste(b$text, "(", paste(teams$name, collapse = "-"), ")")
    paux2 <- plot_ly(z = dens[[i]]$destino$z, type = "heatmap", showscale = F, colors = colorRamp(c("green", "red")), alpha = 0.5) %>%
      layout(annotations = b)
    paux2 <- paux2 %>% add_trace(x = goles$x, y = goles$y, type = "scatter", mode = "markers",
                                 marker = list(color = "blue",
                                               size = 5,
                                               symbols = 'x'))

    subplot(paux1, paux2, nrows = 1, margin = 0.08)
  })
}

pasesPreviosGol <- function(equipo){
  # Seleccionamos el equipo
  team <- team_events %>% filter(name == unique(equipo$name))

  # Filtramos los partidos de ese equipo.
  # Resultado: lista de partidos de ese equipo. El nombre de cada posicion es el id del partido
  partidos <- apply(team, 1, function(x){pass_events %>% filter(match_id == as.numeric(x[["match_id"]]))})
  names(partidos) <- team$match_id

  golesTotales <- lapply(seq_len(length(partidos)), function(i){
    matchID <- names(partidos)[[i]]
    pases <- pass_events %>% filter(match_id == matchID)
    pases <- pases %>% mutate("timestampEvent" = make_datetime(min = min, sec = sec))
    goles <- key_events %>% filter(match_id == matchID, type == "goal", team_id == unique(team$id))
    goles <- goles %>% mutate("timestampEvent" = make_datetime(min = min, sec = sec))

    eventosPrevios <- apply(goles, 1, function(x){
      aux <- pases %>%
        filter(as.POSIXct(timestampEvent, tz="UTC") >= (as.POSIXct(x["timestampEvent"], tz="UTC") - minutes(2)),
               timestampEvent <= as.POSIXct(x["timestampEvent"], tz="UTC"))
    })
    lapply(eventosPrevios, function(gol){
      gol1.1 <- gol %>% group_by(player_id_1)
      gol1.2 <- gol1.1 %>% dplyr::summarize(n.pases = n())
      jugadores <- player_events %>%
        filter(team_id == unique(team$id)) %>%
        dplyr::select(id, known_name, team_id) %>%
        dplyr::distinct()
      gol1.3 <- inner_join(gol1.2, jugadores, by = c("player_id_1" = "id"))
    })
  })

  jugadores <- player_events %>%
    filter(team_id == unique(team$id)) %>%
    dplyr::select(id, known_name, team_id) %>%
    dplyr::distinct()
  golesTotales <- unlist(golesTotales, recursive = F)
  names(golesTotales) <- 1:length(golesTotales)
  df <- data.frame(jugadores, matrix(0, nrow = nrow(jugadores), ncol = length(golesTotales)))
  golString <- paste0("Gol", seq_len(length(golesTotales)))
  names(df)[(ncol(jugadores) + 1):ncol(df)] <- golString
  mapaCalor <- sapply(seq_len(length(golesTotales)), function(i){
    columna <- which(names(df) == paste0("Gol", i))
    df[which(jugadores$id %in% golesTotales[[i]]$player_id_1), columna] <<- golesTotales[[i]]["n.pases"]
  })

  p <- plot_ly(x = mixedsort(colnames(df)[4:ncol(df)]),
          y = jugadores$known_name,
          z = as.matrix(df[,4:ncol(df)]),
          type = "heatmap")

  p
}

##### MAPA CALOR PASES #####
pintarMapaCalorPasesJugadores <- function(ident){

  aux <- team_events %>% filter(id == ident)

  team_name <- unique(aux$name)

  test <- pass_events %>% filter(outcome == 1) %>%
    group_by(team_id, player_id_1, player_id_2) %>%
    summarise(total = n())

  test2 <- test %>% filter(team_id == ident, player_id_2 != 0)
  id_jugadores <- test2 %>% ungroup() %>% distinct(player_id_1)


  fila <- c()
  for(j in 1:nrow(id_jugadores)){
    jug1 <- id_jugadores$player_id_1[j]

    for(i in 1:nrow(id_jugadores)){
      jug2 <- id_jugadores$player_id_1[i]
      kk45 <- test2 %>% filter(player_id_1 == jug1, player_id_2 == jug2)
      if(nrow(kk45) == 0){
        fila <- c(fila, 0)
      } else {
        fila <- c(fila, kk45$total)
      }
    }
  }

  players <- player_events %>% filter(team_id == ident) %>%
    dplyr::select(id, first_name) %>% distinct(id, .keep_all = TRUE)

  players$first_name <- as.character(players$first_name)


  dd <- left_join(id_jugadores, players, by = c("player_id_1" = "id"))
  #dd <- dd %>% arrange("player_id_1")

  m <- matrix(fila, nrow = nrow(id_jugadores), ncol = nrow(id_jugadores))
  p <- plot_ly(
    x = dd$first_name,
    y = dd$first_name,
    z = m, type = "heatmap"
  ) %>%
    layout(title = team_name, yaxis = list(title = 'Origen pase'),
           xaxis = list(title = 'Destino pase'),
           margin = list( r = 10,
                          t = 25,
                          b = 120,
                          l = 160)
    )

  p

}

##### MAPA CALOR PASES FIN #####

##### MAPA CALOR PASES ADELANTE #####
pintarMapaCalorAlante <- function(ident){

  aux <- team_events %>% filter(id == ident)

  team_name <- unique(aux$name)

  test <- pass_events %>% filter(outcome == 1, end_x >= 75) %>%
    group_by(team_id, player_id_1, player_id_2) %>%
    summarise(total = n())

  test2 <- test %>% filter(team_id == ident, player_id_2 != 0)
  id_jugadores <- test2 %>% ungroup() %>% distinct(player_id_1)


  fila <- c()
  for(j in 1:nrow(id_jugadores)){
    jug1 <- id_jugadores$player_id_1[j]

    for(i in 1:nrow(id_jugadores)){
      jug2 <- id_jugadores$player_id_1[i]
      kk45 <- test2 %>% filter(player_id_1 == jug1, player_id_2 == jug2)
      if(nrow(kk45) == 0){
        fila <- c(fila, 0)
      } else {
        fila <- c(fila, kk45$total)
      }
    }
  }

  players <- player_events %>% filter(team_id == ident) %>%
    dplyr::select(id, first_name) %>% distinct(id, .keep_all = TRUE)

  players$first_name <- as.character(players$first_name)

  dd <- left_join(id_jugadores, players, by = c("player_id_1" = "id"))
  #dd <- dd %>% arrange("player_id_1")

  m <- matrix(fila, nrow = nrow(id_jugadores), ncol = nrow(id_jugadores))
  p <- plot_ly(
    x = dd$first_name,
    y = dd$first_name,
    z = m, type = "heatmap"
  ) %>%
    layout(title = team_name, yaxis = list(title = 'Origen pase'),
           xaxis = list(title = 'Destino pase'),
           margin = list( r = 10,
                          t = 25,
                          b = 120,
                          l = 160)
    )

  p

}

##### MAPA CALOR PASES ADELANTE FIN #####

##### CHORD DIAGRAM #####
# devtools::install_github("mattflor/chorddiag")
library(chorddiag)
pasesEntreJugadores <- function(equipo){

  # Seleccionamos el equipo
  team <- team_events %>% filter(name == unique(equipo$name))

  # Filtramos los partidos de ese equipo.
  # Resultado: lista de partidos de ese equipo. El nombre de cada posicion es el id del partido
  partidos <- apply(team, 1, function(x){pass_events %>% filter(match_id == as.numeric(x[["match_id"]]))})
  names(partidos) <- team$match_id

  golesTotales <- sapply(seq_len(length(partidos)), function(i){
    matchID <- names(partidos)[[i]]
    pases <- pass_events %>% filter(match_id == matchID)
    pases <- pases %>% mutate("timestampEvent" = make_datetime(min = min, sec = sec))
    goles <- key_events %>% filter(match_id == matchID, type == "goal", team_id == unique(team$id))
    goles <- goles %>% mutate("timestampEvent" = make_datetime(min = min, sec = sec))

    eventosPrevios <- apply(goles, 1, function(x){
      aux <- pases %>%
        filter(as.POSIXct(timestampEvent, tz="UTC") >= (as.POSIXct(x["timestampEvent"], tz="UTC") - minutes(2)),
               timestampEvent <= as.POSIXct(x["timestampEvent"], tz="UTC"))
    })
    eventosPrevios
  })

  jugadores <- player_events %>%
    filter(team_id == unique(equipo$id)) %>%
    dplyr::select(id, known_name, team_id) %>%
    dplyr::distinct()

  m <- matrix(0, nrow = nrow(jugadores), ncol = nrow(jugadores))
  rownames(m) <- jugadores$id
  colnames(m) <- jugadores$id
  golesAux <- list()
  indice <- 0
  for(i in 1:length(golesTotales)){
    if(length(golesTotales[[i]]) > 0){
      for(j in 1:length(golesTotales[[i]])){
        indice <- indice + 1
        golesAux[[indice]] <- golesTotales[[i]][[j]]
      }
    }
  }
  lapply(golesAux, function(gol){
    apply(gol, 1, function(event){
      fila <- which(gsub(" ", "", event["player_id_1"]) == rownames(m))
      columna <- which(gsub(" ", "", event["player_id_2"]) == colnames(m))
      m[fila, columna] <<- m[fila, columna] + 1
    })
  })

  rownames(m) <- jugadores$known_name
  colnames(m) <- jugadores$known_name

  chorddiag(m, groupnameFontsize = 12)

}
##### CHORD DIAGRAM FIN #####

# Define UI for application that draws a histogram
ui <- fluidPage(

   # Application title
   titlePanel("Opta Data"),
   hidden(
     div(id = "loading-content",
         h2("Creando graficas...")
     )
   ),
   useShinyjs(),
   inlineCSS(css),
   # Sidebar with a slider input for number of bins
   div(id = "app-content",
     sidebarLayout(
        sidebarPanel(width = 3,
          selectInput("siGrafica", label = "Grafica:",
                      choices = c("Distancia pases" = "D",
                                  "Angulo pases" = "A",
                                  "Mapa de calor" = "C",
                                  "Mapa calor pases jugadores" = "MCP",
                                  "Mapa calor pases adelante" = "MCPA",
                                  "Pases previos gol" = "P",
                                  "Pases previos todos goles" = "PT")),
          selectInput("siTeam", label = "Equipo:",
                      choices = sort(levels(team_events$name)))
        ),

        # Show a plot of the generated distribution
        mainPanel(width = 9,
                  hidden(
                    div(id = "textoInfoCalor",
                        "Los goles que se muestran a la izquierda son en propia puerta.
                        Los goles que se muestran a la derecha son del equipo"
                    )
                  ),
                  hidden(
                    div(id = "divChord",
                        chorddiagOutput("chord")
                    )
                  ),
                  div(id = "divGraficas",
                      uiOutput("graficas")
                  )
        )
     )
   )
)

# Define server logic required to draw a histogram
server <- function(input, output) {

  output$chord <- renderChorddiag({
    selectedTeam <- input$siTeam
    # Seleccionamos el equipo
    equipo <- team_events %>% filter(name == selectedTeam)
    pasesEntreJugadores(equipo)
  })

  output$graficas <- renderUI({
    longitud <- 38
    if(isolate(input$siGrafica) == "P"){
      longitud <- 1
    }
    plot_output_list <- lapply(1:longitud, function(i){
      plotlyOutput(paste0("plot", i))
    })
    do.call(tagList, plot_output_list)
  })

  observeEvent(input$siGrafica,{
    grafica <- input$siGrafica
    switch(grafica,
           "D" = {
             shinyjs::hide("divChord")
             shinyjs::hide("textoInfoCalor")
             shinyjs::show("divGraficas")
           },
           "A" = {
             shinyjs::hide("divChord")
             shinyjs::hide("textoInfoCalor")
             shinyjs::show("divGraficas")
           },
           "C" = {
             shinyjs::hide("divChord")
             shinyjs::show("textoInfoCalor")
             shinyjs::show("divGraficas")
           },
           "MCP" = {
             shinyjs::hide("divChord")
             shinyjs::hide("textoInfoCalor")
             shinyjs::show("divGraficas")
           },
           "MCPA" = {
             shinyjs::hide("divChord")
             shinyjs::hide("textoInfoCalor")
             shinyjs::show("divGraficas")
           },
           "P" = {
             shinyjs::hide("divChord")
             shinyjs::hide("textoInfoCalor")
             shinyjs::show("divGraficas")
           },
           "PT" = {
             shinyjs::show("divChord")
             shinyjs::hide("divGraficas")
           }
    )
  })

  observe({
      shinyjs::hide("app-content")
      shinyjs::show("loading-content")
      selectedTeam <- input$siTeam
      grafica <- input$siGrafica

      # Seleccionamos el equipo
      equipo <- team_events %>% filter(name == selectedTeam)

      # Filtramos los partidos de ese equipo.
      # Resultado: lista de partidos de ese equipo. El nombre de cada posicion es el id del partido
      partidos <- apply(equipo, 1, function(x){pass_events %>% filter(match_id == as.numeric(x[["match_id"]]))})
      names(partidos) <- equipo$match_id

      # Calculamos la distancia de pases para cada partido de ese equipo
      partidos <- lapply(partidos, function(x){x %>% mutate("distancia" = sqrt(abs(start_x - end_x)^2 + abs(start_y - end_y)^2))})
      # Si el pase es hacia atras asignamos distancia negativa
      partidos <- lapply(partidos, function(x){x %>% mutate("distancia" = ifelse(end_x < start_x, -distancia, distancia))})
      pases <- lapply(partidos, function(x){
        aux1 <- x %>% filter(team_id == equipo$id[1])
        aux1 %>% mutate("timestamp" = make_datetime(min = min, sec = sec))
      })

      switch(grafica,
             "D" = {
               # shinyjs::hide("textoInfoCalor")
               p <- distanciaPases(equipo, pases)
             },
             "A" = {
               # shinyjs::hide("textoInfoCalor")
               p <- anguloPases(equipo)
             },
             "C" = {
               # shinyjs::show("textoInfoCalor")
               p <- mapaCalor(equipo, pases)
             },
             "P" = {
               # shinyjs::hide("textoInfoCalor")
               p <- pasesPreviosGol(equipo)
             },
             "MCP" = {
              p <- pintarMapaCalorPasesJugadores(unique(equipo$id))
             }
             ,
             "MCPA" = {
               p <- pintarMapaCalorAlante(unique(equipo$id))
             }
      )

      if(grafica == "P" || grafica == "MCP" || grafica == "MCPA"){
        output[["plot1"]] <- renderPlotly({
          p
        })
        lapply(2:38, function(i){
          plotname <- paste0("plot", i)
          output[[plotname]] <- renderPlotly({
            NULL
          })
        })
      }else{
        lapply(seq_len(length(p)), function(i){
          plotname <- paste0("plot", i)
          output[[plotname]] <- renderPlotly({
            p[[i]]
          })
        })
      }

      shinyjs::show("app-content")
      shinyjs::hide("loading-content")
  })

}

# Run the application
shinyApp(ui = ui, server = server)

