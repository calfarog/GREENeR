   
    
# LOADING THE LIBRARY
library(GREENeR)
    
# load the topological sequence of catchments and complementary info
data(catch_data_TN) 
head(catch_data_TN)
data(catch_data_TP) 
head(catch_data_TP)

# load the sources of TN and TP for each year and catchment
data(annual_data_TN)
head(annual_data_TN)
data(annual_data_TP)
head(annual_data_TP)
 
# load the geographical information of the basin (require for some functionalities)
data(sh_file)
head(sh_file)
    
  ## 1 EPLORING THE SCENARIO INPUTS  
    
    # the barplot for the Lay TN Scenario
    Basin_name <- "Lay Basin"    #ERROR NO DIBUJA EL NOMBRE DEL BASIN - OV: TRUE
    input_plot(annual_data_TN, sh_file, Basin_name,"B")
    
    # the barplot for the Lay TP Scenario
    Basin_name <- "Lay Basin"    #ERROR NO DIBUJA EL NOMBRE DEL BASIN
    input_plot(annual_data_TP, sh_file, Basin_name,"B")
    
    
    # the density plots
    input_plot (annual_data_TN, sh_file, Basin_name, "D")
    input_plot (annual_data_TP, sh_file, Basin_name, "D")
    
    
    # The title of the plot
    plotTitle <- "Time series for the Lay Basin"
    
    # the time serie plot type 1 (areas) - OV: I corrected names in the () catch_data and plotTitle 
    input_Tserie (catch_data_TN, annual_data_TN, sh_file, Basin_name, "gr1")
    input_Tserie (catch_data_TP, annual_data_TP, sh_file, Basin_name, "gr1") ## OV: does not work
# Errore in `$<-.data.frame`(`*tmp*`, "shrLevel", value = "level1") : 
#  sostituzione con 1 riga, dati con 0

    
    # the time serie plot type 2 (lines & area)
    input_Tserie (catch_data_TN, annual_data_TN, sh_file, Basin_name, "gr2")
    input_Tserie (catch_data_TP, annual_data_TP, sh_file, plotTitle, "gr2")
    
    # the time serie plot type 3 (areas by year and km2)
    input_Tserie (catch_data_TN, annual_data_TN, sh_file, plotTitle, "gr3")
    input_Tserie (catch_data_TP, annual_data_TP, sh_file, plotTitle, "gr3")
    
    # the time serie plot 4 (by km2 and Shreve)
    input_Tserie (catch_data_TN, annual_data_TN, sh_file, plotTitle, "gr4")
    input_Tserie (catch_data_TP, annual_data_TP, sh_file, Basin_name, "gr4")
       
    # The title of the plot
    mapTitle <- "Lay Basin"
    
    # the Input Load Map by source type 1 (kg/year)
    input_maps (catch_data_TN, annual_data_TN, sh_file, mapTitle,"gr1",legend_position = 3)
    input_maps (catch_data_TP, annual_data_TP, sh_file, mapTitle,"gr1",legend_position = 3)
    
    # the Input Load Map by source type 2 (kg/y/km2)
    input_maps (catch_data_TN, annual_data_TN, sh_file, mapTitle, "gr2",legend_position = 3)
    input_maps (catch_data_TP, annual_data_TP, sh_file, mapTitle, "gr2",legend_position = 3)    
    

 ## 2.CALIBRATION OF SCENARIOS
    
    
 # 2.1 References for TN
    # Lay Basin scenario calibration for TN
     # subset of data rows with reference values to be used in the calibration
     TN_ref_values <- annual_data_TN[!is.na(annual_data_TN$YearlyMass),]
     TN_ref_values
     # number of reference data
     nrow(TN_ref_values)
     # distribution of the references by year and location
     table(TN_ref_values$HydroID,TN_ref_values$YearValue)

  # 2.2 References for TP
     # Lay Basin scenario calibration for TP
     # subset of data rows with reference values to be used in the calibration
     TP_ref_values <- annual_data_TN[!is.na(annual_data_TP$YearlyMass),]
     TP_ref_values
     # number of reference data
     nrow(TP_ref_values)
     # distribution of the references by year and location
     table(TP_ref_values$HydroID,TP_ref_values$YearValue)
     
     
    # TN Calibration
     
    #  Define the calibration settings:
    n_iter <- 100                    # number of iterations
    low <- c(10, 0.000, 0.01) 	  # the lower limits for all params (alpha_P, alpha_L, sd_coef)
    upp <- c(50, 0.3 ,  0.99)         # the upper limits for all params (alpha_P, alpha_L, sd_coef)
    
    # years in which the model should be executed
    years <- c(2003:2009)       
    
    # execution of the calibration  
    DF_calib_TN <- calib_green (catch_data_TN , annual_data_TN, n_iter, low, upp, years)
    class(DF_calib_TN)
    DF_calib_TN <- data.frame(DF_calib_TN) 
      
    ## EXPLORING THE CALIBRATION RESULTS 
    
    # Generating the box plots  
    rateBS <-  5      #  percent of parameters selected from the whole set produced in the calibration
    calib_boxplot (DF_calib_TN, rateBS)
    
    # Generating the dot  plots  
    Gof_mes <- "NSE"
    calib_dot (DF_calib_TN ,Gof_mes)
    
    # Generating the scatter plots  
    Gof_mes <- "NSE"
    scatter_plot  (DF_calib_TN ,Gof_mes)
    
    
    # Extract the best set of parameter according to a Goodness of fit metric  
    Gof_mes <- "NSE"    # according the NSE goodness of fit metric
    NSE_bestParams <- select_params (DF_calib_TN, Gof_mes)
    ParamNSE2 <- as.numeric(NSE_bestParams[2:4])
    NSE_bestParams
    
    Gof_mes <- "rNSE" 
    rNSE_bestParams <- select_params(DF_calib_TN,Gof_mes)
    Param_mrNSE2 <- as.numeric(rNSE_bestParams[2:4])
    rNSE_bestParams
    
    
    ## OBSERVED VS PREDICTED FOR TN PARAMETER SETS
    
    # annual scatter plot comparing observed vs modeled loads by year
    label_plot <- "NSE best params for TN in the Lay" 
    simobs_annual_plot ( catch_data_TN, annual_data_TN, ParamNSE2[1] , 
                         ParamNSE2[2], ParamNSE2[3], years,label_plot)
    
    
    #  Comparing Observed vs Predicted for two set of parameters (in TN)
    setPlabels <- c("NSE","rNSE")    
    label_plot <- "Comparing two sets of parameters for Lay TN" 
    compare_calib ( catch_data_TN, annual_data_TN, ParamNSE2[1], ParamNSE2[2],ParamNSE2[3],
                    Param_mrNSE2[1], Param_mrNSE2[2],Param_mrNSE2[3], years, label_plot, setPlabels )
    
    # Computing the nutrient balance  
    years <- c(1990:2018) 
    Nut_bal_TN <- nut_balance (catch_data_TN, annual_data_TN, ParamNSE2[1] , 
                         ParamNSE2[2], ParamNSE2[3],years)
    # Plot the sankey diagram with the result of the balance
    sank <- N4_sankey(Nut_bal_TN)

    # PLOTING THE TIME SERIES OF THE NUTRIENTS

    # Computing the source apportionment      
    years <- c(1990:2018) 
    Basin_sa <- green_shares( catch_data_TN, annual_data_TN, ParamNSE2[1],
                              ParamNSE2[2],ParamNSE2[3],years)
    
    # The title of the plot
    plotTitle <- "TN Time series Load Output for the Lay Basin"
    
    # Output Load Basin average time series (lines)
    nutrient_tserie (Basin_sa, sh_file, plotTitle,"gr1")
    
    # Total Load in the Basin Outlet time series (lines)
    nutrient_tserie (Basin_sa, sh_file, plotTitle,"gr2")
    
    # Total Load in the Basin Outlet by source apportionment time series (lines)
    nutrient_tserie (Basin_sa, sh_file, plotTitle,"gr3")
        
    # PLOTING THE average maps OF THE NUTRIENTS
    
    # The title of the Map
    mapTitle <- "Output Loads  for the Lay Basin"
    
    # Basin Output Load  Maps by source
    nutrient_maps(Basin_sa, sh_file, mapTitle, "gr1",legend_position = 3)
    
    # Basin Output Specific Load  Maps 
    nutrient_maps(Basin_sa, sh_file, mapTitle, "gr2", legend_position = 3)
    
    # Basin Output Specific Load by km2 Maps 
    nutrient_maps(Basin_sa, sh_file, mapTitle, "gr3", legend_position = 3)
    
    ## TP case calibration ##
    
    n_iter <- 50                    # number of iterations
    low <- c(10, 0.001, 0.1)   # the lower limits for all params (alpha_P, alpha_L, sd_coef)
    upp <- c(50, 0.2,  0.9)       # the upper limits for all params (alpha_P, alpha_L, sd_coef
    
    # years in which the model should be executed
    years <- c(1990:2018) 
    
    
    DF_calib_TP <- calib_green (catch_data_TP, annual_data_TP, n_iter, low, upp, years)
    DF_calib_TP <- data.frame(DF_calib_TP) 
    # OV: give me an error result: 
# Errore in checkForRemoteErrors(val) : 
# 3 nodes produced errors; first error: subscript fuori limite
#In aggiunta: Messaggi di avvertimento:
#1: In .Internal(gc(verbose, reset, full)) :
#  chiusura della connessione non utilizzata 6 (<-OVIGIAK-HP:11578)
#2: In .Internal(gc(verbose, reset, full)) :
#  chiusura della connessione non utilizzata 5 (<-OVIGIAK-HP:11578)
#3: In .Internal(gc(verbose, reset, full)) :
#  chiusura della connessione non utilizzata 4 (<-OVIGIAK-HP:11578)
#Cronometro fermo a: 0 0 0.25
## I tried to change ranges and n_iter but always results in problems. I cannot proceed with more checks...
   
    # Generating the box plots  
    rateBS <-  5      #  percent of parameters selected from the whole set produced in the calibration
    calib_boxplot (DF_calib_TP, rateBS )
    
    
    # Generating the dot  plots  
    Gof_mes <- "NSE"
    calib_dot (DF_calib_TP ,Gof_mes )
    
    # Generating the scatter plots  
    Gof_mes <- "NSE"
    scatter_plot  ( DF_calib_TP ,Gof_mes )
    
    
    # Extract the best set of parameter according to a Goodness of fit metric  
    Gof_mes <- "NSE"    # according the NSE goodness of fit metric
    NSE_bestParamsTP <- select_params (DF_calib_TP, Gof_mes)
    ParamNSE2_TP <- as.numeric(NSE_bestParamsTP[2:4])
    
    metric <- "mNSE" 
    Param_rNSE <- select_params(DF_calib,metric)
    Param_rNSE2<- as.numeric(Param_rNSE[2:4])
    
    # generating the scatter plot comparing observed vs modeled loads by year
    label_plot <- "NSE best params for TP in the Lay" 
    simobs_annual_plot (catch_data, annual_data_TP, ParamNSE2_TP[1] , 
                        ParamNSE2_TP[2], ParamNSE2_TP[3], years,label_plot)
    
    label_plot <- "rNSE best params for TP in the Lay" 
    simobs_annual_plot (catch_data, annual_data_TP, Param_rNSE2[1] , 
                         Param_rNSE2[2], Param_rNSE2[3], years,label_plot)
    
    
    
    ##  Comparing Observed vs Predicted for two set of parameters (in TN)
    # generating the scatter plot comparing two set of parameters observed vs modeled loads by year
    setPlabels <- c("NSE","mNSE")    
    label_plot <- "Comparing two sets of parameters for Lay TP" 
    compare_calib ( catch_data, annual_data, ParamNSE2_TP[1], ParamNSE2_TP[2],ParamNSE2_TP[3],
                    Param_rNSE2[1], Param_rNSE2[2],Param_rNSE2[3], years, label_plot, setPlabels )
    
    ############ same analisis for the TP
    Basin_saTP <- green_shares(catch_data, annual_data_TP, ParamNSE2_TP[1],
                               ParamNSE2_TP[2],ParamNSE2_TP[3],years)
    
    
    # The title of the plot
    plotTitle <- "TP Time series Load Output for the Lay Basin"
    
    # Output Load Basin average time series (lines)
    nutrient_tserie (Basin_saTP, sh_file, plotTitle,"gr1")
    
    # Total Load in the Basin Outlet time series (lines)
    nutrient_tserie (Basin_saTP, sh_file, plotTitle,"gr2")
    
    # Total Load in the Basin Outlet by source apportionment time series (lines)
    nutrient_tserie (Basin_saTP, sh_file, plotTitle,"gr3")
    
    
    # The title of the Map
    mapTitle <- "TP Output Loads  for the Lay Basin"
    
    # Basin Output Load  Maps by source
    nutrient_maps(Basin_saTP, sh_file, mapTitle, "gr1",legend_position = 3)
    
    # Basin Output Specific Load  Maps 
    nutrient_maps(Basin_saTP, sh_file, mapTitle, "gr2", legend_position = 3)
    
    # Basin Output Specific Load by km2 Maps 
    nutrient_maps(Basin_saTP, sh_file, mapTitle, "gr3", legend_position = 3)
    
    
    