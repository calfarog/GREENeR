rhub::check_for_cran()
rhub::check_for_cran()
devtools::spell_check()
devtools::spell_check("GREENeR")
devtools::spell_check(".")
setwd("C:/Users/urjc/SynologyDrive/Publicaciones en revistas/Udias/rgreen")
devtools::spell_check("GREENeR")
devtools::spell_check(".")
setwd("C:/Users/urjc/SynologyDrive/Publicaciones en revistas/Udias/rgreen/GREENeR")
devtools::spell_check(".")
devtools::spell_check("GREENeR")
devtools::spell_check("./R/rgreen.R")
devtools::spell_check("./R/")
devtools::spell_check(pkg = ".")
devtools::spell_check()
install.packages("spelling")
devtools::document()
devtools::spell_check()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::build()
devtools::check_win_devel()
rhub::check_for_cran()
devtools::document()
n_iter <- 2
low <- c(10, 0.000, 0.1)
upp <- c(70, 0.3,  0.9)
years <- c(1995,1996,1999)
df_calib <- calib_green(catch_data_TN, annual_data_TN, n_iter, low, upp, years)
data(catch_data_TN)
data(annual_data_TN)
df_calib <- calib_green(catch_data_TN, annual_data_TN, n_iter, low, upp, years)
par_range <- data.frame(min = low, max = upp)
latin_range <- as.data.frame(FME::Latinhyper(par_range, n_iter))
calib_green_help(1, catch_data = catch_data_TN, annual_data = annual_data_TN, years = years, latin_range = latin_range)
task = 1
alpha_p <- as.vector(latin_range[task, 1])
alpha_l <- as.vector(latin_range[task, 2])
sd_c <- as.vector(latin_range[task,3])
df_model_res <- launch_green(catch_data, annual_data, alpha_p, alpha_l,
sd_c, years)
df_model_res <- launch_green(catch_data_TN, annual_data_TN, alpha_p, alpha_l, sd_c, years)
df_res_calib <- df_model_res[!is.na(df_model_res$ObsLoad), ]
df_res_calib <- df_res_calib[order(df_res_calib$Year,
df_res_calib$HydroID),]
loc_years = years
catch_data = catch_data_TN
annual_data = annual_data_TN
years <- check_years(loc_years, unique(annual_data$YearValue))
sd_coef = sd_coef
sd_coef = sd_c
preparation <- data_preparation(catch_data, annual_data)
annual_datat <- preparation$annual_datat
catch_datat <- preparation$catch_datat
annual_datat[, AA := exp(-alpha_p * InvNrmRain)]
annual_datat[, SumDS := (Min + Man + Fix + Soil + Atm * (1 - ForestFraction))]
annual_datat[, SumPSCmp1 := (Ps + atm_coeff * Atm * ForestFraction +
sd_coef * Sd )]
annual_datat[, CatchToRiver := (SumDS * AA + SumPSCmp1)]
atm_coeff = 0.38
annual_datat[, SumPSCmp1 := (Ps + atm_coeff * Atm * ForestFraction +
sd_coef * Sd )]
annual_datat[, CatchToRiver := (SumDS * AA + SumPSCmp1)]
green_loadst <- annual_datat[, .(HydroID, Year = YearValue,
ObsLoad = YearlyMass, CatchToRiver)]
catch_datat[, BB := exp(-1 * alpha_l * NrmLengthKm)]
data.table::setkey(catch_datat, "HydroID")
data.table::setkey(green_loadst, "HydroID")
cdat_greenLt <- catch_datat[green_loadst]
data.table::setkey(cdat_greenLt, "Shreve")
listaShrt <- split(cdat_greenLt[, .(HydroID, Shreve, Year)], by="Shreve")
cdat_greenLt$CatchLoad <- 0
type <- "L"
cdat_total <- aggregate_loop(listaShrt, cdat_greenLt, years, type)
green_loadst <- annual_datat[, .(HydroID, Year = YearValue,
ObsLoad = YearlyMass, CatchToRiver)]
Lay_TN <- readRDS("C:/Users/urjc/SynologyDrive/Publicaciones en revistas/Udias/rgreen/20211025/Scen/Lay_TN.rds")
Mino_TN <- readRDS("C:/Users/urjc/SynologyDrive/Publicaciones en revistas/Udias/rgreen/20211025/Scen/Mino_TN.rds")
Lay_TP <- readRDS("C:/Users/urjc/SynologyDrive/Publicaciones en revistas/Udias/rgreen/20211025/Scen/Lay_TP.rds")
all(is.na(Lay_TN[[2]]$YearlyMass))
Lay_TN[[2]]$YearlyMass[Lay_TN[[2]]$YearlyMass != NA]
Lay_TN[[2]]$YearlyMass[!is.na(Lay_TN[[2]]$YearlyMass)]
annual_datat[!is.na(annual_datat)]
annual_datat$YearlyMass[!is.na(annual_datat$YearlyMass)]
green_loadst$YearlyMass[!is.na(green_loadst$YearlyMass)]
green_loadst$ObsLoad[!is.na(green_loadst$ObsLoad)]
!is.na(green_loadst$ObsLoad)
df_res_calib <- df_model_res[!is.na(df_model_res$ObsLoad), ]
!is.na(df_model_res$ObsLoad)
cdat_greenLt$ObsLoad[!is.na(cdat_greenLt$ObsLoad)]
years
yr = 1995
print(paste("Calculating year:", yr))
shr_hydro_IDt <- unique(listaShrt[[1]][Year == yr]$HydroID)
cdat_greenLt_Year <- cdat_greenLt[Year == yr]
cdat_greenLt_Year[cdat_greenLt_Year$HydroID %in% shr_hydro_IDt,
CatchLoad := (1 - LakeFrRet) *
(CatchToRiver + CatchLoad) * BB]
data.table::setkey(cdat_greenLt_Year, "To_catch")
for (iShr in 2:(length(listaShrt))) {
shr_hydro_IDt <- listaShrt[[iShr]][Year == yr]$HydroID
df_agt <- cdat_greenLt_Year[.(shr_hydro_IDt)]
df_agt <- df_agt[, .(To_catch, CatchLoad)]
df_agt <- df_agt[, .(CatchLoad = sum(CatchLoad)), .(HydroID = To_catch)]
cdat_greenLt_Year[match(df_agt$HydroID,cdat_greenLt_Year$HydroID),
CatchLoad := df_agt$CatchLoad]
cdat_greenLt_Year[cdat_greenLt_Year$HydroID %in% shr_hydro_IDt,
CatchLoad := (1 - LakeFrRet) *
(CatchToRiver + CatchLoad) * BB]
if (type == "N"){
cdat_greenLt_Year[cdat_greenLt_Year$HydroID %in% shr_hydro_IDt,
CatchRivRet := (CatchToRiver + CatchLoad) * (1 - BB)]
cdat_greenLt_Year[cdat_greenLt_Year$HydroID %in% shr_hydro_IDt,
CatchLakeRet := LakeFrRet *
(CatchToRiver + CatchLoad) * BB]
}
}
cdat_greenLt_Year$ObsLoad[!is.na(cdat_greenLt_Year$ObsLoad)]
years <- 1990:2018
dF_calib <- calib_green(catch_data_TN, annual_data_TN, n_iter, low, upp, years)
devtools::document()
devtools::document()
devtools::document()
data(catch_data_TN)
data(annual_data_TN)
n_iter <- 2 # number of iterations
low <- c(10, 0.000, 0.1)
upp <- c(70, 0.3,  0.9)
years <- 1990:2018
df_calib <- calib_green(catch_data_TN, annual_data_TN, n_iter, low, upp,
years)
df_calib <- calib_green(catch_data_TN, annual_data_TN, n_iter, low, upp,
years)
devtools::build_manual()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
data(catch_data_TN)
data(annual_data_TN)
# the first set of parameters to assess the basin model
alpha_p <- 35.09
alpha_l <- 0.02
sd_coef <- 0.2
# the second set of parameters to assess the basin model
alpha_p2 <- 41.23
alpha_l2 <- 0.0015
sd_coef2 <- 0.6
# years in which the plot will we shown
years <- c(1995,1996,1999)
nameBasin <- "Lay"
# generating the scatter plot comparing two set of parameters observed
# versus modeled loads by year
setPlabels <- c("bestNSE","bestR2")
compare_calib(catch_data_TN, annual_data_TN, alpha_p , alpha_l, sd_coef,
)
catch_data <- catch_data_TN
annual_data <- annual_data_TN
alpha_p1 = alpha_p
alpha_l1 = alpha_l
sd_coef1 = sd_coef
name_basin = nameBasin
df_scen_global <- launch_green(catch_data, annual_data, alpha_p1, alpha_l1,
sd_coef1, years)
df_scen_local <- launch_green(catch_data, annual_data, alpha_p2, alpha_l2,
sd_coef2, years)
df_gl <- df_scen_global[df_scen_global$To_catch == -1,]
df_lo <- df_scen_local[df_scen_local$To_catch == -1,]
df_observ_g <- df_scen_global[!is.na(df_scen_global$ObsLoad), ]
df_observ_l <- df_scen_local[!is.na(df_scen_local$ObsLoad), ]
df_observ_g <- df_observ_g %>%
rename(PredictLoad = CatchLoad)
gof_glo <- hydroGOF::gof(sim = df_observ_g$PredictLoad,
obs = df_observ_g$ObsLoad,
digits = 4)
df_observ_g$PredictLoad
df_observ_g
years <- 1990:2018
df_scen_global <- launch_green(catch_data, annual_data, alpha_p1, alpha_l1,
sd_coef1, years)
df_scen_local <- launch_green(catch_data, annual_data, alpha_p2, alpha_l2,
sd_coef2, years)
df_gl <- df_scen_global[df_scen_global$To_catch == -1,]
df_lo <- df_scen_local[df_scen_local$To_catch == -1,]
df_observ_g <- df_scen_global[!is.na(df_scen_global$ObsLoad), ]
df_observ_l <- df_scen_local[!is.na(df_scen_local$ObsLoad), ]
df_observ_g <- df_observ_g %>%
rename(PredictLoad = CatchLoad)
gof_glo <- hydroGOF::gof(sim = df_observ_g$PredictLoad,
obs = df_observ_g$ObsLoad,
digits = 4)
gof_loc <- hydroGOF::gof(sim = df_observ_l$CatchLoad,
obs = df_observ_l$ObsLoad,
digits = 4)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
rhub::check_for_cran()
rhub::check_for_cran()
usethis::use_readme_rmd()
devtools::document()
install.packages("pkdown")
install.packages("C:/Users/urjc/Desktop/pkgdown_2.0.2.tar.gz", repos = NULL, type = "source")
install.packages("htmltools")
install.packages("htmltools")
