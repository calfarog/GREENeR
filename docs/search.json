[{"path":"https://calfarog.github.io/GREENeR/articles/GREENeR.html","id":"description-of-the-tool","dir":"Articles","previous_headings":"","what":"Description of the tool","title":"Geospatial Regression Equation for European Nutrient losses (GREEN)","text":"GREENeR (Udías et al. 2024) open-source R package assessing annual time series nutrient loads river network basin outlets, contributions nutrient sources loads. package provides tools methods apply model Geospatial Regression Equation European Nutrient losses (GREEN; (B. Grizzetti et al. 2005; B. Grizzetti, Bouraoui, De Marsily 2008; Bruna Grizzetti, Bouraoui, Aloe 2012; Bruna Grizzetti et al. 2021)) area interest. brief description model, including sources parameters, can found end document. package includes functions perform graphical summaries model inputs, calibrate model parameters, run sensitivity analysis checks, visualize model inputs outputs graphs maps total loads contributions source. package works total nitrogen (TN) total phosphorus (TP). allows analysis different scenarios nutrient input river basin region study. package parallel-capable alleviate computational burden large basins.","code":""},{"path":"https://calfarog.github.io/GREENeR/articles/GREENeR.html","id":"an-example-case-the-lay-river-basin","dir":"Articles","previous_headings":"","what":"An example case: the Lay river Basin","title":"Geospatial Regression Equation for European Nutrient losses (GREEN)","text":"GREENeR functionalities illustrated Lay river basin, France. Please note basin data extracted pan-European dataset (Bruna Grizzetti et al. 2021) purpose showing package tools analysis steps generic region. Since dataset may reflect local sources correctly, implications results terms nutrient fluxes may incorrect evaluated commented herein. package includes two nutrient type scenarios (one TN one TP), disaggregated information nutrient inputs catchments compose basin (spatial resolution Catchment Characterisation Model; (De Jager Vogt 2007)). input (TN TP) time series span 1990 2018. dataset includes also spatial information vectorial format enable mapping tool results.","code":""},{"path":"https://calfarog.github.io/GREENeR/articles/GREENeR.html","id":"loading-and-description-of-the-scenario","dir":"Articles","previous_headings":"","what":"Loading and description of the scenario","title":"Geospatial Regression Equation for European Nutrient losses (GREEN)","text":"GreeneR needs information topology catchment nutrient sources. information contained two data.frames. Note data.frame structures column names must respected creating new dataset, otherwise functions fail. topology contained data.frame “catch_data_TN” (catch_data_TP; example dataset, Lay river Basin topology presented). fields defined follow: HydroID (integer): unique identifier catchment To_catch (integer): unique identifier catchment catchment goes. Note outlet To_catch == -1 Shreve (integer positive): indicates Shreve order topological sequence stream network. GREEN resolves sequentially loads increasing numbers Shreve order (headwaters, .e. catchments receive water, Shreve == 1, catchments receive waters Shreve 1 Shreve == 2, etc till outlet) LakeFrRet (fraction, 0-1): lake retention fraction (Lret eqs 1, 6, 7). Note, different TN TP module NrmLengthKm (double): normalized length catchment reach (eq 5) nutrient sources catchment per year contained data.frame “annual_data_TN” TN scenario (“annual_data_TP” TP scenario). annual data frames fields common: BasinID (integer): unique identifier Basin. may useful region interest encompasses one basin; catchments belonging Basin share BasinID. YearValue (integer): year data defined HydroID (integer positive): unique catchment identifier (matches ID catch_data) NextDownID (integer positive): corresponds To_catch ForestFraction: Non-agricultural land cover catchment (fraction, FF eqs 6 7) InvNrmRain: inverse normalized rainfall (eq 4) YearlyNMass: observed annual total nitrogen load (TN ton/yr) monitoring station data available (NA data present catchment year). data allow calibration model parameter; thus sufficient observed loads essential calibration process. fields specify nutrient sources, differs two nutrient scenarios. case TN, fields : Atm: Annual nitrogen deposition atmosphere (ton/yr) Min: Annual amount nitrogen mineral fertilisers (ton/yr) Man: Annual amount nitrogen manure fertilisers (ton/yr) Fix: Annual amount nitrogen fixation leguminous crops fodder (ton/yr) Soil: Annual amount nitrogen fixation bacteria soils (ton/yr) Sd: Nitrogen input scattered dwellings (ton/yr) Ps: Nitrogen input point sources (ton/yr) case TP fields : Bg: annual amount phosphorus background losses (ton/yr; eq 7) Min: annual amount phosphorus mineral fertilisers (ton/yr) Man: annual amount phosphorus manure fertilisers (ton/yr) Sd: phosphorus input scattered dwellings (ton/yr) Ps: phosphorus input point sources (ton/yr) functionalities GREENeR package, geographical information catchments required form sf (simple feature) object (sf package, Pebesma & Bivand, implements Simple Features open standard)","code":"# load the GREENeR package library(GREENeR) # load the topological sequence of catchments and complementary info data(catch_data_TN) head(catch_data_TN) #>     HydroID To_catch Shreve LakeFrRet NrmLengthKm #> 1    361076   361195      1         0    0.010270 #> 28   361521   362009      4         0    0.059295 #> 55   362311   362426      2         0    0.011319 #> 84   361187   361195      2         0    0.011948 #> 109  361383   361521      1         0    0.005731 #> 136  362149   362175      1         0    0.002374 # load the sources of TN for each year and catchment data(annual_data_TN) head(annual_data_TN) #>   BasinID YearValue HydroID NextDownID   Atm    Min    Man   Fix  Soil    Sd #> 1  291994      1990  361076     361195 9.608 28.111 21.379 2.909 2.108 0.514 #> 2  291994      1991  361076     361195 9.608 28.295 20.318 2.888 2.108 0.589 #> 3  291994      1992  361076     361195 9.608 26.482 21.514 2.917 2.108 0.665 #> 4  291994      1993  361076     361195 9.608 24.060 19.861 2.868 2.108 0.741 #> 5  291994      1994  361076     361195 9.608 23.725 20.199 2.890 2.108 0.816 #> 6  291994      1995  361076     361195 9.608 24.271 21.772 2.830 2.108 0.892 #>      Ps YearlyMass ForestFraction InvNrmRain #> 1 0.314         NA      0.1700787   0.081113 #> 2 0.251         NA      0.1700787   0.075192 #> 3 0.188         NA      0.1700787   0.069081 #> 4 0.126         NA      0.1700787   0.066110 #> 5 0.063         NA      0.1700787   0.047314 #> 6 0.000         NA      0.1700787   0.061390  # load the sources of TP for each year and catchment data(annual_data_TP) head(annual_data_TP) #>   BasinID YearValue HydroID NextDownID    Bg   Min   Man    Sd    Ps YearlyMass #> 1  291994      1990  361187     361195 0.082 8.577 3.108 0.330 0.315         NA #> 2  291994      1991  361187     361195 0.082 8.300 2.819 0.319 0.300         NA #> 3  291994      1992  361187     361195 0.082 7.688 3.393 0.307 0.285         NA #> 4  291994      1993  361187     361195 0.082 6.614 3.660 0.296 0.270         NA #> 5  291994      1994  361187     361195 0.082 6.119 4.508 0.284 0.256         NA #> 6  291994      1995  361187     361195 0.082 6.025 4.676 0.273 0.241         NA #>   ForestFraction InvNrmRain #> 1              0   0.081765 #> 2              0   0.075672 #> 3              0   0.068371 #> 4              0   0.066009 #> 5              0   0.047398 #> 6              0   0.061488 # load the geographical information of the basin (require for some functionalities) data(sh_file) head(sh_file) #> Simple feature collection with 6 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 3440600 ymin: 2645700 xmax: 3476900 ymax: 2691300 #> Projected CRS: ETRS89-extended / LAEA Europe #>   OBJECTID HydroID NextDownID BasinID JunctionID AreaSqkm DrainAreaS Shreve #> 1    71204  368447         -1  291994   20837332    43.68    1971.10     95 #> 2   350329  362484     362498  291994   33061724     0.58       0.58      1 #> 3   350337  368467     368429  291994   33061732    21.37      21.37      1 #> 4   350345  362497     362454  291994   33061740    25.52      25.52      1 #> 5   350346  362499     362498  291994   33061741     0.03     158.18      8 #> 6   350347  362498     362537  291994   33061742     1.44     160.20      9 #>     FecID   CsbID SuppID  Csb0ID Shape_STAr Shape_STLe #> 1 6031419 7000265  71204 7100074   43680000      59800 #> 2 6031445 7000265 350329 7100074     580000       3600 #> 3 6031420 7000265 350337 7100074   21370000      32600 #> 4 6031450 7000265 350345 7100074   25520000      36400 #> 5 6031445 7000265 350346 7100074      30000        800 #> 6 6031445 7000265 350347 7100074    1440000       8000 #>                         geometry #> 1 MULTIPOLYGON (((3447500 264... #> 2 MULTIPOLYGON (((3476600 268... #> 3 MULTIPOLYGON (((3440600 265... #> 4 MULTIPOLYGON (((3458000 268... #> 5 MULTIPOLYGON (((3476700 268... #> 6 MULTIPOLYGON (((3476000 269..."},{"path":"https://calfarog.github.io/GREENeR/articles/GREENeR.html","id":"exploring-scenario-inputs","dir":"Articles","previous_headings":"","what":"Exploring scenario inputs","title":"Geospatial Regression Equation for European Nutrient losses (GREEN)","text":"library includes functions examine nutrient sources Basin, explore applied, either globally, distributed time space. first summary provided input_plot() function, - option “B” given, shows mean annual nutrient loads per source whole period analysis. Barplot Lay TN scenario. Barplot Lay TP scenario. selecting option “D”, input_plot() returns density plots nutrient loads per catchment. useful see distribution nutrient source inputs Basin. coef_SD parameter scale factor standard deviation data. can useful defining limits graph, example. cSD 2, xlim calculated mean plus two standard deviations, represent, example, 95% data normal distribution. Density plot Lay TN scenario. Density plot Lay TP scenario. function input_Tserie() allows examine temporal evolution inputs. two options, first, displaying cumulative total amounts source (“gr1”). Time series plot type 1 (areas) TN TP. second, total amounts source total amount(“gr2”) Time series plot type 2 (lines) TN TP. function input_Tserie_area() allows examine temporal evolution inputs relation area. also two options, first, displaying cumulative total amounts source per unit area (“gr1”) Time series plot type 3 (areas year km2) TN TP. latter graph particularly useful range catchment areas large compare nutrient application intensity catchments. Lay river example, graphs show, among things, amount P mineral fertilization (Min) decreased time, whereas amount P manure increased. second alternative function input_Tseries_area(), “gr2”. option compares levels nutrient inputs three zones basin (upper, middle lower part). upper zone includes catchments median (50%) shreve value, middle zone includes catchments 50% 75% shreve values, lower part includes catchments 75% 100%. top graph, corresponding area part indicated. example , can seen differences N inputs upper lower part basin noticeable whole period. Time series plot type 4, thatcompares levels nutrient inputs three zones basin. function input_maps() shows nutrient inputs distribution Basin. function generates map nutrient source, plus map (yellow-green scale) total diffuse nutrient sources, can contrasted point sources map. first option (“gr1”) shows total inputs (kt/year). Input map source type 1 TN scenario legend_position parameter allows modify position legend located figure. TP scenario: Input map source type 1 TP scenario Option “gr2” shows inputs per area (kt/y/km2): Input map source type 2 TN scenario TP scenario: Input map source type 2 TP scenario","code":"# the barplot for the Lay TN and TP Scenarios input_plot(annual_data_TN, sh_file, \"Lay\", \"B\") input_plot(annual_data_TP, sh_file, \"Lay\", \"B\") # the density plots for the Lay TN and TP Scenarios input_plot(annual_data_TN, \"Lay\", \"D\",coef_SD=1, sh_file) input_plot(annual_data_TP, \"Lay\", \"D\",coef_SD=1, sh_file) # the time serie plot type 1 (areas) input_Tserie(catch_data_TN, annual_data_TN, \"Lay\", \"gr1\") input_Tserie(catch_data_TP, annual_data_TP, \"Lay\", \"gr1\") # the time serie plot type 2 (lines) input_Tserie(catch_data_TN, annual_data_TN,  \"Lay\", \"gr2\") input_Tserie(catch_data_TP, annual_data_TP,  \"Lay\", \"gr2\") # the time serie plot type 4 (by km2 and Shreve) input_Tserie_area(catch_data_TN, annual_data_TN, sh_file, \"Lay\", \"gr2\") input_Tserie_area(catch_data_TP, annual_data_TP, sh_file, \"Lay\", \"gr2\") # the Input Load Map by source type 1 (kt/year) input_maps(catch_data_TN, annual_data_TN, sh_file, \"gr1\", legend_position = 3) # the Input Load Map by source type 1 (kt/year) input_maps(catch_data_TP, annual_data_TP, sh_file, \"gr1\", legend_position = 3) # the Input Load Map by source type 2 (kt/y/km2) input_maps(catch_data_TN, annual_data_TN, sh_file, \"gr2\", legend_position = 3) # the Input Load Map by source type 2 (kt/y/km2) input_maps(catch_data_TP, annual_data_TP, sh_file, \"gr2\", legend_position = 3)"},{"path":"https://calfarog.github.io/GREENeR/articles/GREENeR.html","id":"lake-retention","dir":"Articles","previous_headings":"","what":"Lake Retention","title":"Geospatial Regression Equation for European Nutrient losses (GREEN)","text":"Lake Retention section, note scenarios TN TP also linked information lake retention. data often dependent model used generate scenario includes actual field data. Therefore, viewing distribution lake retention data can insightful directly impacts outcomes entire GREEN model. function carries analysis LakeRetent_plot(). Lake retention values distribution TN scenario","code":"LakeRetent_plot(catch_data_TN)"},{"path":"https://calfarog.github.io/GREENeR/articles/GREENeR.html","id":"observed-load","dir":"Articles","previous_headings":"","what":"Observed Load","title":"Geospatial Regression Equation for European Nutrient losses (GREEN)","text":"Observed Load section, discuss importance information annual total nitrogen load (TN ton/yr) total phosphorous (TN ton/yr) gathered monitoring station data, wherever available. data available particular catchment year, noted NA. information crucial calibration process model, allows adjustment model parameters. Therefore, substantial amount observed loads essential calibration process. package includes function called references_plot(), can used create preliminary summary data available monitoring stations. diving calibration thus useful start exploring observations. Observed references distribution TN scenario example basin 22 observations (derived publicly available dataset European Environment Agency, EEA 6 different stations 2003 2009; note however one station references years. (TP case 58 observations, collected eight catchments 1997 2012, one complete time-series).","code":"TN_ref_values <- annual_data_TN[!is.na(annual_data_TN$YearlyMass),] nrow(TN_ref_values) table(TN_ref_values$HydroID,TN_ref_values$YearValue)    references_plot(annual_data_TN)"},{"path":"https://calfarog.github.io/GREENeR/articles/GREENeR.html","id":"model-calibration","dir":"Articles","previous_headings":"","what":"Model calibration","title":"Geospatial Regression Equation for European Nutrient losses (GREEN)","text":"run calibration process scenario (function calib_green()), following settings must defined: expected range parameter. range defined two vectors three values, one lower limits one upper limits three parameters. values correspond parameters model sequence: alpha_P (eq 4), alpha_L (eq 5), sd_coeff (eqs 6 7). number iterations performed calibration process. higher number iterations, likely achieve quality parameters, longer computation time required. Although depends catchment proposed intervals, recommended run least 200 iterations enough information continue calibration process. years included calibration process. example , calibration TN Lay basin performed parameters indicated . process parallelised use cores computer. computation time depends computer, basin, number iterations. calibration function applies Latin Hypercube sampling scheme three parameters within possible range (defined lower upper limits) evaluates model performance (predictions available observations) calibration period (specified ‘years’) calculating several “goodness--fit” metrics. function returns data frame parameters goodness--fit scores can analyzed. function applies following goodness--fit metrics (Althoff Rodrigues 2021): NSE: Nash-Sutcliffe efficiency rNSE: Relative Nash-Sutcliffe efficiency mNSE: Modified Nash-Sutcliffe efficiency cp: Coefficient Persistence VE: Volumetric Efficiency KGE: Kling-Gupta efficiency d: Index Agreement md: Modified index agreement rd: Relative Index Agreement r: Linear correlation coefficient R2: Coefficient determination PBIAS: Percent bias MAE: mean absolute error RMSE: Root mean square error : Mean error MSE: Mean square error NRMSE: Normalized Root Mean Square Error","code":"# Parameter for the calibration of the model # the lower limits for all params (alpha_P, alpha_L, sd_coef) low <- c(10, 0.000, 0.1)  # the upper limits for all params (alpha_P, alpha_L, sd_coef)   upp <- c(50, 0.08, 0.9)         # number of iterations n_iter <- 200   # years in which the model should be executed years <- c(2003:2009) # execution of the calibration   DF_calib_TN <- calib_green(catch_data_TN, annual_data_TN, n_iter, low, upp, years) DF_calib <- data.frame(DF_calib)"},{"path":"https://calfarog.github.io/GREENeR/articles/GREENeR.html","id":"exploring-calibration-results","dir":"Articles","previous_headings":"","what":"Exploring calibration results","title":"Geospatial Regression Equation for European Nutrient losses (GREEN)","text":"Choosing right goodness--fit metric select best set parameters model largely depends overall study scope, area interest (e.g. high low load, upper lower catchment area), available observation dataset (size quality). library includes series functions examine calibration results help select suitable set parameters. calib_boxplot() function shows relationships best parameter sets chosen according one goodness--fit parameter (title boxplot) according one goodness--fit metric (title plot) relation others (x label). six metrics used frequently hydrological calibration included figure. lower panel, figure shows well distribution model parameters best parameter sets. absolute best parameter set according goodness--fit metrics marked red dots boxplot.  calib_dot() function shows distribution parameters relation chosen goodness--fit metric. function figure can generated previously described goodness--fit metrics.  example figure, best results alpha_P achieve best NSE range 0.25-0.30 (cyan color), clear patterns two parameters. Also, significant interaction parameters can appreciated. can conclude sensitive parameter case alpha_P. scatter_plot() function shows parameter realizations calibration dataset selected goodness--fit metric visualize influence parameter model results. result depends goodness--fit metric user wants consider. function figure can generated metrics generated green_calib() function.","code":"# Generating the box plots   rateBS <-  5  #  percent of parameters selected from the whole calibration set calib_boxplot(DF_calib_TN, rateBS) # Generating the dot plots   Gof_mes <- \"NSE\" calib_dot(DF_calib_TN, Gof_mes) # Generating the scatter plots   Gof_mes <- \"NSE\" scatter_plot(DF_calib_TN, Gof_mes)"},{"path":"https://calfarog.github.io/GREENeR/articles/GREENeR.html","id":"selecting-the-best-parameter-sets","dir":"Articles","previous_headings":"","what":"Selecting the best parameter sets","title":"Geospatial Regression Equation for European Nutrient losses (GREEN)","text":"best parameter set according selected goodness--fit metrics can extracted select_params() function: function can applied different goodness--fit metric obtain different potential model realizations: (note actual values returned function change calibration run)","code":"Gof_mes <- \"NSE\" # according the NSE goodness of fit metric NSE_bestParams <- select_params(DF_calib_TN, Gof_mes) NSE_bestParams Param_NSE2 <- as.numeric(NSE_bestParams[2:4]) Gof_mes <- \"rNSE\"  rNSE_bestParams <- select_params(DF_calib_TN,Gof_mes) rNSE_bestParams     Param_rNSE2 <- as.numeric(rNSE_bestParams[2:4])"},{"path":"https://calfarog.github.io/GREENeR/articles/GREENeR.html","id":"annual-observed-vs-predicted-values-for-a-parameter-set","dir":"Articles","previous_headings":"","what":"Annual observed vs predicted values for a parameter set","title":"Geospatial Regression Equation for European Nutrient losses (GREEN)","text":"parameter set selected, useful verify graphically differences observations (ObsLoad) model predictions (PredictLoad). Included tool function simobs_annual_plot(), allows year--year comparison observed predicted values given parameter sets.","code":"# annual scatter plot comparing observed vs modeled loads by year label_plot <- \"NSE best params for TN in the Lay\"  Themx <- max(annual_data_TN$YearlyMass, na.rm = TRUE) simobs_annual_plot(catch_data_TN, annual_data_TN, Param_NSE2[1], Param_NSE2[2], Param_NSE2[3], years, label_plot, Themx)"},{"path":"https://calfarog.github.io/GREENeR/articles/GREENeR.html","id":"comparing-observed-vs-predicted-for-two-sets-of-parameters","dir":"Articles","previous_headings":"","what":"Comparing Observed vs Predicted for two sets of parameters","title":"Geospatial Regression Equation for European Nutrient losses (GREEN)","text":"best parameter set depends goodness--fit metric. advisable pre-select alternative parameter sets (according different GoF) compare model results, making final selection parameter set. compare_calib() function shows simultaneously observations modelled values obtained two parameter sets.  top left figure, scores six frequently used goodness--fit metrics two parameter sets (identified setPlabels) reported.","code":"setPlabels <- c(\"NSE\", \"rNSE\")     label_plot <- \"Comparing two sets of parameters for Lay TN\"  compare_calib(catch_data_TN, annual_data_TN, Param_NSE2[1], Param_NSE2[2], Param_NSE2[3], Param_rNSE2[1], Param_rNSE2[2], Param_rNSE2[3], years, label_plot, setPlabels)"},{"path":"https://calfarog.github.io/GREENeR/articles/GREENeR.html","id":"estimation-of-nutrient-fluxes-and-source-contribution-in-the-basin","dir":"Articles","previous_headings":"","what":"Estimation of nutrient fluxes and source contribution in the basin","title":"Geospatial Regression Equation for European Nutrient losses (GREEN)","text":"appropriate parameter set selected, possible run model estimate nutrient loads across basin. function region_nut_balance() runs GREEN model selected parameter set, returns region nutrient mass balance nutrient fluxes whole simulation period. results function can visualized Sankey diagram function N4_sankey().","code":"# Computing the nutrient balance   years <- c(2003:2009) Nut_bal_TN <- region_nut_balance(catch_data_TN, annual_data_TN, Param_NSE2[1], Param_NSE2[2], Param_NSE2[3], years, atm_coeff = 0.38) # Plot the sankey plot with the result of the balance sank <- N4_sankey(Nut_bal_TN)"},{"path":"https://calfarog.github.io/GREENeR/articles/GREENeR.html","id":"share-of-nutrients","dir":"Articles","previous_headings":"","what":"Share of nutrients","title":"Geospatial Regression Equation for European Nutrient losses (GREEN)","text":"function green_shares() runs GREEN model selected parameter set returns catchments nutrient loads contributions nutrient source simulation period. results model can examined several functions. function nutrient_tseries() allows display time series total load (TN TP) river outlet marian region. “gr1” option shows temporal evolution total load basin outlet simulation period.  “gr2” option shows temporal evolution total load basin outlet simulation period contributions sources.  function nutrient_tserie_darea(), option “gr1”, shows temporal evolution total load outputs upper, central lower catchment area.  function nutrient_maps() shows maps nutrient loads basin. option “gr1” shows loads source (logarithmic scale improve visualization differences basin may vary several orders magnitude).  “style” parameter allows user automatically create breaks specifying algorithms. Among others, following styles can passed: “fisher”, “log10_pretty”, “log10”, “order”, “cont”, “quantile”, “jenks”. alternative “gr2” shows total load catchment outlets (logarithmic scale improve visualisation, differences sources outlets usually several orders magnitude).  alternative “gr3” produces maps total load catchment area (kt/km2/y) basin.","code":"years <- c(2003:2009) basin_sa <- green_shares(catch_data_TN, annual_data_TN, Param_NSE2[1], Param_NSE2[2], Param_NSE2[3], years) # The title of the plot plot_title <- \"Time series Load Output for the Lay Basin\"     outFile <- tempfile(pattern = \"OutletLoad\", fileext = \".csv\") nutrient_tserie(basin_sa, plot_title, \"gr1\", outFile) # Output Load Basin average time series (lines) nutrient_tserie(basin_sa, plot_title, \"gr2\") # Total Load in the Basin Outlet by source apportionment time series (lines) nutrient_tserie_darea(basin_sa, sh_file, \"Lay Basin\", \"gr1\") style <- \"log10\"  nutrient_maps(basin_sa, sh_file, \"gr1\", style, legend_position = 3) # Basin Output Total Load  Maps  nutrient_maps(basin_sa, sh_file, style, \"gr2\", legend_position = 3) # Basin Output Specific Load by km2 Maps  nutrient_maps(basin_sa, sh_file, style, \"gr3\", legend_position = 3)"},{"path":"https://calfarog.github.io/GREENeR/articles/GREENeR.html","id":"green-model-equations-sources-and-resources-for-input-data","dir":"Articles","previous_headings":"","what":"GREEN model equations, sources and resources for input data","title":"Geospatial Regression Equation for European Nutrient losses (GREEN)","text":"Geospatial Regression Equation European Nutrient losses (GREEN; B. Grizzetti et al. (2005); B. Grizzetti, Bouraoui, De Marsily (2008); Bruna Grizzetti, Bouraoui, Aloe (2012); Bruna Grizzetti et al. (2021)) conceptual model assess nutrient loads (total nitrogen total phosphorous) basin given diffuse point emissions land river network. model comprises two major nutrient pathways: diffuse sources undergo retention land phase (basin retention) reaching stream, point sources directly discharged surface waters. river network, sources reduced -stream retention (river retention). Diffuse sources include nutrient mineral fertilisers, manure application, nitrogen crop soil fixation, inputs scattered dwellings (.e. isolated houses small agglomerations connected sewerage systems), nitrogen atmospheric deposition (nitrogen module) background losses (phosphorus module). Point sources consist urban industrial wastewater discharges. Basin retention modelled decay function proportional inverse total annual precipitation catchment; river retention estimated decay function proportional river length, considered proxy water residence time. addition, lake retention simulated function lakes residence time average depth. basin divided spatial subunits (called catchments), given area, river reach, -let node, outlet node. catchments topologically connected basin heads outlet cascading sequence. sequence nutrient load accumulation stream network defined Shreve (1966) order. Nutrient input different sources, basin river retention simulated small catchment routed river network. catchment basin, GREEN nutrient load \\(L_i\\) estimated general equation: \\[\\begin{equation} \\label{eq:green_nutrient_load}   L_i = (1 - Lret_i) * (DS_i * (1 - Bret_i) + PS_i + U_i) * (1 - Rret_i) \\end{equation}\\] : \\(L_i\\) = Nutrient load catchment outlet (-node) (ton/yr) Sources nutrients : \\(DS_i\\) = Nutrient diffuse sources catchment (ton/yr) \\(PS_i\\) = Nutrient point sources catchment (ton/yr) \\(U_i\\) = Nutrient load upstream catchments (ton/yr) Sinks nutrients : \\(Lret_i\\) = Lake retention (fraction). Lret can defined according Kronvang et al. (2004): \\[\\begin{equation}   Lret_i = 1 - \\frac{1}{[1 + (\\frac{7.3}{z}) * RT]} \\text{(nitrogen)} \\end{equation}\\] \\[\\begin{equation}   Lret_i = 1 - \\frac{1}{[1 + (\\frac{26}{z}) * RT]} \\text{(phosphorus)} \\end{equation}\\] : \\(z\\) average lake depth (m), \\(RT\\) = hydraulic residence time (yr). European scale, average lake depth hydraulic residence time can obtained HydroLAKES database (https://www.hydrosheds.org/pages/hydrolakes, Messager et al. (2016)). \\(Bret_i\\) = Basin retention (fraction): \\[\\begin{equation} \\label{eq:basin_retention}   Bret_i = 1 - \\exp(-alpha_p * NrmInvRainy) \\end{equation}\\] \\(NrmInvRain\\) inverse annual precipitation (mm) year y, normalized maximum dataset: \\(NrmInvRain = (1 / precipitationy ) / max(1 / precipitation))\\) \\(Rret_i\\) = River retention (fraction): \\[\\begin{equation}   Rret_i = 1 - \\exp(-alpha_l * NrmLengthKmi) \\end{equation}\\] \\(NrmLengthKm\\) length (km) catchment reach, normalized maximum dataset: \\(NrmLengthKm\\) = (length catchment \\(\\) reach, km) / \\(max\\)(Reach length basin). Thus, inverse precipitation river length scaled maximum scaling (Frank Todeschini 1994). Note way basin retention varies year year according annual precipitation, whereas river retention given catchment constant. equation applied sequentially upstream nodes outlet. model parameters : basin retention coefficient (\\(alpha_p\\)), together annual precipitation catchment regulates nutrient retention diffuse sources \\(\\eqref{eq:basin_retention}\\); river retention coefficient (\\(alpha_l\\)), regulates river retention per river km. fraction domestic diffuse sources reaches stream network (\\(sd_{coef}\\)). Note Europe amount ot nturients scattered dwellings minor source nutrients, therefore parameter sensitive, fixed value \\(0.50\\) recommended. regions world however may case, hence model GREENeR package defines fraction calibration parameter. \\(\\eqref{eq:green_nutrient_load}\\) defines general GREEN function. However, diffuse point sources defined differently nutrient module, .e. nitrogen phosphorus. specifically GREEN nitrogen model, total nitrogen load \\(L_i\\) catchment \\(\\) estimated : \\[\\begin{equation}   L_i = (1 - Lret_i) * ((MinN_i + ManN_i + FixN_i + SoilN_i + (1 - FF_i) * AtmN_i) * \\\\   (1 - Bret_i) + 0.38 * FF_i * AtmN_i + sd_{coef} * SdN_i + PsN_i + U_i) * (1 - Rret_i) \\end{equation}\\] : \\(MinN_i\\) = Annual amount nitrogen mineral fertilisers (ton/yr) \\(ManN_i\\) = Annual amount nitrogen manure fertilisers (ton/yr) \\(FixN_i\\) = Annual amount nitrogen fixation leguminous crops fodder (ton/yr) \\(SoilN_i\\) = Annual amount nitrogen fixation bacteria soils (ton/yr) \\(AtmN_i\\) = Annual nitrogen deposition atmosphere (ton/yr) \\(FF_i\\) = Non-agricultural land cover catchment (fraction) \\(SdN_i\\) = Nitrogen input scattered dwellings (ton/yr) \\(PsN_i\\) = Nitrogen input point sources (ton/yr) \\(U_i\\) = Nitrogen load upstream catchments (ton/yr). Note nitrogen atmospheric deposition losses split two parts, .e. inputs agricultural land undergo basin retention (includes also crop uptake), areas (FF fraction) reduced fixed rate, derived literature, entering stream. Background losses nitrogen thus estimated \\(0.38 * FF * AtmN\\). atmospheric deposition \\(10\\) kgN/ha corresponds background \\(3.8\\) kgN/ha (line values reported Commission et al. (2004)). GREEN phosphorus model, total annual phosphorus load \\(L_i\\) catchment \\(\\) estimated equation: \\[\\begin{equation} L_i = (1 - Lret_i) * ((MinP_i + ManP_i + (1 - FF_i) * BgP_i) * (1 - Bret_i) + FF_i * BgP_i + \\\\ sd_{coef} * SdP_i + PsP_i + U_i) * (1 - Rret_i) \\end{equation}\\] \\(MinP_i\\) = annual amount phosphorus mineral fertilisers (ton/yr) \\(ManP_i\\) = annual amount phosphorus manure fertilisers (ton/yr) \\(FF_i\\) = Non-agricultural land cover catchment (fraction) \\(BgP_i\\) = annual amount phosphorus background losses (ton/yr) \\(SdP_i\\) = phosphorus input scattered dwellings (ton/yr) \\(PsP_i\\) = phosphorus input point sources (ton/yr) \\(U_i\\) = Phosphorus load upstream catchments (ton/yr) Note phosphorous background losses splited two parts, inputs agricultural land undergoing basin retention, areas (FF fraction) considered entering stream. Background losses phosphorus estimated \\(0.15\\) kgP/ha (line values reported Commission et al. (2004)). Assembling input data running GREEN model time consuming. Data sources application European scale described Bruna Grizzetti et al. (2021). Domestic sources nitrogen phosphorus can also found Vigiak et al. (2020).","code":""},{"path":[]},{"path":"https://calfarog.github.io/GREENeR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":". Udias. Author. B. Grizzetti. Author. O. Vigiak. Author. J. Gomez. Author. C. Alfaro. Author, maintainer. . Aloe. Author.","code":""},{"path":"https://calfarog.github.io/GREENeR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Udias , Grizzetti B, Vigiak O, Gomez J, Alfaro C, Aloe (2024). GREENeR: Geospatial Regression Equation European Nutrient Losses (GREEN). https://github.com/calfarog/GREENeR, https://calfarog.github.io/GREENeR/.","code":"@Manual{,   title = {GREENeR: Geospatial Regression Equation for European Nutrient Losses (GREEN)},   author = {A. Udias and B. Grizzetti and O. Vigiak and J. Gomez and C. Alfaro and A. Aloe},   year = {2024},   note = {https://github.com/calfarog/GREENeR, https://calfarog.github.io/GREENeR/}, }"},{"path":"https://calfarog.github.io/GREENeR/index.html","id":"greener-","dir":"","previous_headings":"","what":"Geospatial Regression Equation for European Nutrient Losses (GREEN)","title":"Geospatial Regression Equation for European Nutrient Losses (GREEN)","text":"goal GREENeR provide conceptual model assess nutrient loads (total nitrogen total phosphorous) basin given diffuse point emissions land river network. model comprises two major nutrient pathways: diffuse sources undergo retention land phase (basin retention) reaching stream, point sources directly discharged surface waters. river network, sources reduced -stream retention (river retention).","code":""},{"path":"https://calfarog.github.io/GREENeR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Geospatial Regression Equation for European Nutrient Losses (GREEN)","text":"Install GREENeR package via CRAN: can also install development version GREENeR GitHub :","code":"install.packages(\"GREENeR\") # install.packages(\"devtools\") devtools::install_github(\"calfarog/GREENeR\")"},{"path":"https://calfarog.github.io/GREENeR/index.html","id":"illustrative-example","dir":"","previous_headings":"","what":"Illustrative Example","title":"Geospatial Regression Equation for European Nutrient Losses (GREEN)","text":"basic example shows GREENeR works, detailed illustration, please see vignettes. GREENeR functionalities illustrated Lay river basin, France. Please note basin data extracted pan-European dataset (Grizzetti et al. 2021) purpose showing package tools analysis steps generic region.","code":""},{"path":"https://calfarog.github.io/GREENeR/index.html","id":"model-calibration","dir":"","previous_headings":"","what":"Model calibration","title":"Geospatial Regression Equation for European Nutrient Losses (GREEN)","text":"quality model calibration depends quality number available observations. run calibration process scenario (function calib_green()), following settings must defined: expected range parameter. range defined two vectors three values, one lower limits one upper limits three parameters. values correspond parameters model sequence: alpha_P, alpha_L, sd_coeff. number iterations performed calibration process. higher number iterations, likely achieve quality parameters, longer computation time required. Although depends catchment proposed intervals, recommended run least 200 iterations enough information continue calibration process. years included calibration process. basic example shows solve common problem: calibration TN Lay basin performed parameters indicated . process parallelised use cores computer. computation time depends computer, basin, number iterations. calibration function applies Latin Hypercube sampling scheme three parameters within possible range (defined lower upper limits) evaluates model performance (predictions available observations) calibration period (specified years) calculating several “goodness--fit” metrics. function returns data frame parameters goodness--fit scores can analyzed. function applies following goodness--fit metrics (Althoff Rodrigues 2021): NSE: Nash-Sutcliffe efficiency rNSE: Relative Nash-Sutcliffe efficiency mNSE: Modified Nash-Sutcliffe efficiency cp: Coefficient Persistence VE: Volumetric Efficiency KGE: Kling-Gupta efficiency d: Index Agreement md: Modified index agreement rd: Relative Index Agreement r: Linear correlation coefficient R2: Coefficient determination PBIAS: Percent bias MAE: mean absolute error RMSE: Root mean square error : Mean error MSE: Mean square error NRMSE: Normalized Root Mean Square Error","code":"library(GREENeR)  data(\"catch_data_TN\") data(\"annual_data_TN\")  # Parameter for the calibration of the model # the lower limits for all params (alpha_P, alpha_L, sd_coef) low <- c(10, 0.000, 0.1)  # the upper limits for all params (alpha_P, alpha_L, sd_coef)   upp <- c(50, 0.08, 0.9)         # number of iterations n_iter <- 2000      # years in which the model should be executed years <- c(2003:2009) # execution of the calibration   DF_calib_TN <- calib_green(catch_data_TN, annual_data_TN, n_iter, low, upp, years)"},{"path":"https://calfarog.github.io/GREENeR/index.html","id":"exploring-calibration-results-and-visualization-tools","dir":"","previous_headings":"","what":"Exploring calibration results and visualization tools","title":"Geospatial Regression Equation for European Nutrient Losses (GREEN)","text":"Choosing right goodness--fit metric select best set parameters model largely depends overall study scope, area interest (e.g. high low load, upper lower catchment area), available observation dataset (size quality). library includes series functions examine calibration results help select suitable set parameters.","code":""},{"path":"https://calfarog.github.io/GREENeR/index.html","id":"calibration-boxplot","dir":"","previous_headings":"Exploring calibration results and visualization tools","what":"Calibration boxplot","title":"Geospatial Regression Equation for European Nutrient Losses (GREEN)","text":"","code":"# Generating the box plots   rateBS <-  5  #  percent of parameters selected from the whole calibration set calib_boxplot(DF_calib_TN, rateBS)"},{"path":"https://calfarog.github.io/GREENeR/index.html","id":"calibration-dot-plot","dir":"","previous_headings":"Exploring calibration results and visualization tools","what":"Calibration dot plot","title":"Geospatial Regression Equation for European Nutrient Losses (GREEN)","text":"","code":"# Generating the dot plots   Gof_mes <- \"NSE\" calib_dot(DF_calib_TN, Gof_mes)"},{"path":"https://calfarog.github.io/GREENeR/index.html","id":"calibration-scatter-plot","dir":"","previous_headings":"Exploring calibration results and visualization tools","what":"Calibration scatter plot","title":"Geospatial Regression Equation for European Nutrient Losses (GREEN)","text":"","code":"# Generating the scatter plots   Gof_mes <- \"NSE\" scatter_plot(DF_calib_TN, Gof_mes)"},{"path":"https://calfarog.github.io/GREENeR/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Geospatial Regression Equation for European Nutrient Losses (GREEN)","text":"Althoff, D., & Rodrigues, L. N. (2021). Goodness--fit criteria hydrological models: Model calibration performance assessment. Journal Hydrology, 600, 126674. Grizzetti, B. Vigiak, O. Udias, . Aloe, . Zanni, M. Bouraoui, F. Pistocchi, . Dorati, C. Friedland, R. De Roo, . others (2021). EU policies reduce nutrient pollution European inland coastal waters. Global Environmental Change, 69, 102281. https://doi.org/10.1016/j.gloenvcha.2021.102281","code":""},{"path":"https://calfarog.github.io/GREENeR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://calfarog.github.io/GREENeR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://calfarog.github.io/GREENeR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://calfarog.github.io/GREENeR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://calfarog.github.io/GREENeR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://calfarog.github.io/GREENeR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://calfarog.github.io/GREENeR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://calfarog.github.io/GREENeR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://calfarog.github.io/GREENeR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://calfarog.github.io/GREENeR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://calfarog.github.io/GREENeR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://calfarog.github.io/GREENeR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://calfarog.github.io/GREENeR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://calfarog.github.io/GREENeR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://calfarog.github.io/GREENeR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://calfarog.github.io/GREENeR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://calfarog.github.io/GREENeR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://calfarog.github.io/GREENeR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://calfarog.github.io/GREENeR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://calfarog.github.io/GREENeR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://calfarog.github.io/GREENeR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2022 GREENeR  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. GREENeR Copyright (C) 2022 GREENeR This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://calfarog.github.io/GREENeR/reference/aggregate_loop.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate loop — aggregate_loop","title":"Aggregate loop — aggregate_loop","text":"function aggregate variables data frame.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/aggregate_loop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate loop — aggregate_loop","text":"","code":"aggregate_loop(listaShrt, cdat_greenLt, years, type)"},{"path":"https://calfarog.github.io/GREENeR/reference/aggregate_loop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate loop — aggregate_loop","text":"listaShrt, cdat_greenLt data frame years vector integer type character values \"L\" running launch_green \"N\" running region_nut_balance","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/aggregate_loop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate loop — aggregate_loop","text":"matrix","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/annual_data_TN.html","id":null,"dir":"Reference","previous_headings":"","what":"Annual data TN — annual_data_TN","title":"Annual data TN — annual_data_TN","text":"Defines sources nutrient (nitrogen) year catchments.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/annual_data_TN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annual data TN — annual_data_TN","text":"","code":"annual_data_TN"},{"path":"https://calfarog.github.io/GREENeR/reference/annual_data_TN.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Annual data TN — annual_data_TN","text":"data frame 14 variables: BasinID integer. basin unique identifier. YearValue integer. year data defined. HydroID integer positive. Unique catchment identifier. NextDownID integer. Unique identifier catchment   catchment goes. Atm double. Annual nitrogen deposition atmosphere   (ton/yr). Min double. Annual amount nitrogen mineral   fertilisers (ton/yr). Man double. Annual amount nitrogen manure fertilisers   (ton/yr). Fix double. Annual amount nitrogen fixation leguminous   crops fodder (ton/yr). Soil double. Annual amount nitrogen fixation bacteria   soils (ton/yr). Sd double. Nitrogen input scattered dwellings (ton/yr). Ps double. Nitrogen input point sources (ton/yr). YearlyMass double. Observed annual total nitrogen load   (TN ton/yr) monitoring station data. ForestFraction double. Non-agricultural land cover   catchment (fraction). InvNrmRain double. Inverse normalized rainfall.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/annual_data_TP.html","id":null,"dir":"Reference","previous_headings":"","what":"Annual data TP — annual_data_TP","title":"Annual data TP — annual_data_TP","text":"Defines sources nutrient (phosphorus) year catchments.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/annual_data_TP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annual data TP — annual_data_TP","text":"","code":"annual_data_TP"},{"path":"https://calfarog.github.io/GREENeR/reference/annual_data_TP.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Annual data TP — annual_data_TP","text":"data frame 12 variables: BasinID integer. basin unique identifier. YearValue integer. year data defined. HydroID integer positive. Unique catchment identifier. NextDownID integer. Unique identifier catchment   catchment goes. Bg double. Annual amount phosphorus background losses   (ton/yr). Min double. Annual amount phosphorus mineral fertilisers   (ton/yr). Man double. Annual amount phosphorus manure fertilisers   (ton/yr). Sd double. Phosphorus input scattered dwellings   (ton/yr). Ps double. Phosphorus input point sources (ton/yr). YearlyMass double. Observed annual total phosphorus load   (TP ton/yr) monitoring station data. ForestFraction double. Non-agricultural land cover   catchment (fraction). InvNrmRain double. Inverse normalized rainfall.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/append_empty_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Append empty columns — append_empty_cols","title":"Append empty columns — append_empty_cols","text":"function add empty values data frame.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/append_empty_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append empty columns — append_empty_cols","text":"","code":"append_empty_cols(df)"},{"path":"https://calfarog.github.io/GREENeR/reference/append_empty_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append empty columns — append_empty_cols","text":"df data frame. data frame add two new columns, Fix Soil","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/append_empty_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append empty columns — append_empty_cols","text":"One object, data frame.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/calculate_shreve.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate shreve — calculate_shreve","title":"Calculate shreve — calculate_shreve","text":"Calculate shreve","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/calculate_shreve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate shreve — calculate_shreve","text":"","code":"calculate_shreve(catch_data)"},{"path":"https://calfarog.github.io/GREENeR/reference/calculate_shreve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate shreve — calculate_shreve","text":"catch_data data frame.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/calculate_shreve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate shreve — calculate_shreve","text":"data frame","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/calib_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Boxplot of best parameters — calib_boxplot","title":"Boxplot of best parameters — calib_boxplot","text":"Returns boxplots best model parameters ranked according different goodness--fit measures, also boxplot distribution  parameters values.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/calib_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boxplot of best parameters — calib_boxplot","text":"","code":"calib_boxplot(df_cb, rate_bs)"},{"path":"https://calfarog.github.io/GREENeR/reference/calib_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boxplot of best parameters — calib_boxplot","text":"df_cb data frame. Table result calibration process. rate_bs numeric. Rate (%) parameters selected whole set produced calibration.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/calib_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boxplot of best parameters — calib_boxplot","text":"Multiple boxplots","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/calib_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boxplot of best parameters — calib_boxplot","text":"","code":"# \\donttest{ # the data of the TN scenario data(catch_data_TP) data(annual_data_TP) # the parameter for the calibration of the model n_iter <- 2 # number of iterations # the lower limits for all params (alpha_P, alpha_L, sd_coef) low <- c(10, 0.000, 0.1) # the upper limits for all params (alpha_P, alpha_L, sd_coef) upp <- c(70, 0.3,  0.9) # years in which the model should be executed years <- 1990:2018 # execution of the calibration df_calib <- calib_green(catch_data_TP, annual_data_TP, n_iter, low, upp, years) #> [1] \"Elapsed time: 9.41\" # Generating the box plots rateBS <- 5 # rate of best set of parameter to include in the plots calib_boxplot(df_calib, rateBS) #> [1] 18 #> [1] 6 #> [1] 9 #> [1] 8 #> [1] 5 #> [1] 10 #> [1] 17 #> [1] 19 #> [1] 15 #> [1] 20  # }"},{"path":"https://calfarog.github.io/GREENeR/reference/calib_dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Dot plot of goodness-of-fit metric vs parameter value — calib_dot","title":"Dot plot of goodness-of-fit metric vs parameter value — calib_dot","text":"Dot plot goodness--fit metric vs parameters value","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/calib_dot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dot plot of goodness-of-fit metric vs parameter value — calib_dot","text":"","code":"calib_dot(df_cb, param)"},{"path":"https://calfarog.github.io/GREENeR/reference/calib_dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dot plot of goodness-of-fit metric vs parameter value — calib_dot","text":"df_cb data frame. table result calibration process. param character. Goodness fit measures. See alternatives link \"NSE\" \"rNSE\", \"NSE\", \"mNSE\", \"MAE\", \"PBIAS\", \"cp\", \"R2\".","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/calib_dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dot plot of goodness-of-fit metric vs parameter value — calib_dot","text":"Multiple dot plots","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/calib_dot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dot plot of goodness-of-fit metric vs parameter value — calib_dot","text":"","code":"# \\donttest{ # the data of the TN scenario data(catch_data_TN) data(annual_data_TN) # the parameter for the calibration of the model n_iter <- 2 # number of iterations # the lower limits for all params (alpha_P, alpha_L, sd_coef) low <- c(10, 0.000, 0.1) # the upper limits for all params (alpha_P, alpha_L, sd_coef) upp <- c(70, 0.3,  0.9) # years in which the model should be executed years <- 1990:2018 # execution of the calibration df_calib <- calib_green(catch_data_TN, annual_data_TN, n_iter, low, upp, years) #> [1] \"Elapsed time: 13.59\" # Generating the dot plots gof_mes <- \"NSE\" calib_dot(df_calib, gof_mes)  # }"},{"path":"https://calfarog.github.io/GREENeR/reference/calib_green.html","id":null,"dir":"Reference","previous_headings":"","what":"Calibration of the GREEN model — calib_green","title":"Calibration of the GREEN model — calib_green","text":"Runs GREEN model calibration","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/calib_green.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calibration of the GREEN model — calib_green","text":"","code":"calib_green(catch_data, annual_data, n_iter, low, upp, years)"},{"path":"https://calfarog.github.io/GREENeR/reference/calib_green.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calibration of the GREEN model — calib_green","text":"catch_data data frame. Definition topological sequence catchments. annual_data data frame. Sources nutrient year catchments. n_iter numeric. Number iterations calibration process. low numeric. Lower bounds calibration parameters. upp numeric. Upper bounds calibration parameters. years integer. Years used calibration. sequences use c(yearini:yearend).","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/calib_green.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calibration of the GREEN model — calib_green","text":"One object, data frame model calibration","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/calib_green.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calibration of the GREEN model — calib_green","text":"","code":"# \\donttest{ # the data of the TN scenario data(catch_data_TN) data(annual_data_TN) # the parameter for the calibration of the model n_iter <- 2 # number of iterations # the lower limits for all params (alpha_P, alpha_L, sd_coef) low <- c(10, 0.000, 0.1) # the upper limits for all params (alpha_P, alpha_L, sd_coef) upp <- c(70, 0.3,  0.9) # years in which the model should be executed years <- 1990:2018 # execution of the calibration dF_calib <- calib_green(catch_data_TN, annual_data_TN, n_iter, low, upp, years) #> [1] \"Elapsed time: 6.99000000000001\" # }"},{"path":"https://calfarog.github.io/GREENeR/reference/calib_green_help.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel calibration help function — calib_green_help","title":"Parallel calibration help function — calib_green_help","text":"help function calib_green function","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/calib_green_help.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel calibration help function — calib_green_help","text":"","code":"calib_green_help(task, catch_data, annual_data, years, latin_range)"},{"path":"https://calfarog.github.io/GREENeR/reference/calib_green_help.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallel calibration help function — calib_green_help","text":"task integer number simulation catch_data data frame. defines topological sequence catchments. annual_data data frame. defines sources nutrient year catchments. years integer. defines years interest. latin_range data frame. defines values params taking + account limits.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/calib_green_help.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallel calibration help function — calib_green_help","text":"matrix","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/catch_data_TN.html","id":null,"dir":"Reference","previous_headings":"","what":"Catch data TN — catch_data_TN","title":"Catch data TN — catch_data_TN","text":"Defines topological sequence catchments nitrogen.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/catch_data_TN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Catch data TN — catch_data_TN","text":"","code":"catch_data_TN"},{"path":"https://calfarog.github.io/GREENeR/reference/catch_data_TN.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Catch data TN — catch_data_TN","text":"data frame 5 variables: HydroID integer positive. Unique catchment identifier. To_catch integer. Unique identifier catchment   catchment goes. Note outlet To_catch== -1. Shreve integer. indicates Shreve order   topological sequence stream network. LakeFrRet fraction, 0-1. Lake retention fraction. NrmLengthKm double. Normalized length catchment reach.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/catch_data_TP.html","id":null,"dir":"Reference","previous_headings":"","what":"Catch data TP — catch_data_TP","title":"Catch data TP — catch_data_TP","text":"Defines topological sequence catchments phosphorus.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/catch_data_TP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Catch data TP — catch_data_TP","text":"","code":"catch_data_TP"},{"path":"https://calfarog.github.io/GREENeR/reference/catch_data_TP.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Catch data TP — catch_data_TP","text":"data frame 5 variables: HydroID integer positive. Unique catchment identifier. To_catch integer. Unique identifier catchment   catchment goes. Note outlet To_catch== -1. Shreve integer. indicates Shreve order   topological sequence stream network. LakeFrRet fraction, 0-1. Lake retention fraction. NrmLengthKm double. Normalized length catchment reach.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/check_colnames_annual.html","id":null,"dir":"Reference","previous_headings":"","what":"Check colnames — check_colnames_annual","title":"Check colnames — check_colnames_annual","text":"function checks column names catch_data data frame correct.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/check_colnames_annual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check colnames — check_colnames_annual","text":"","code":"check_colnames_annual(df)"},{"path":"https://calfarog.github.io/GREENeR/reference/check_colnames_annual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check colnames — check_colnames_annual","text":"df data frame.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/check_colnames_annual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check colnames — check_colnames_annual","text":"data frame","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/check_colnames_catch.html","id":null,"dir":"Reference","previous_headings":"","what":"Check colnames catch_data — check_colnames_catch","title":"Check colnames catch_data — check_colnames_catch","text":"function checks column names annual_data data frame correct.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/check_colnames_catch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check colnames catch_data — check_colnames_catch","text":"","code":"check_colnames_catch(df)"},{"path":"https://calfarog.github.io/GREENeR/reference/check_colnames_catch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check colnames catch_data — check_colnames_catch","text":"df data frame.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/check_colnames_catch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check colnames catch_data — check_colnames_catch","text":"data frame","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/check_years.html","id":null,"dir":"Reference","previous_headings":"","what":"Check years — check_years","title":"Check years — check_years","text":"function check years data frame.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/check_years.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check years — check_years","text":"","code":"check_years(loc_years, years)"},{"path":"https://calfarog.github.io/GREENeR/reference/check_years.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check years — check_years","text":"loc_years numeric. vector integer years interest years numeric. vector integer years information data frame","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/check_years.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check years — check_years","text":"vector integer","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/compare_calib.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot comparing observed vs modeled loads for two set of parameters — compare_calib","title":"Plot comparing observed vs modeled loads for two set of parameters — compare_calib","text":"Returns scatter plot comparing observed versus modeled loads obtained two model parameter sets","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/compare_calib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot comparing observed vs modeled loads for two set of parameters — compare_calib","text":"","code":"compare_calib(   catch_data,   annual_data,   alpha_p1,   alpha_l1,   sd_coef1,   alpha_p2,   alpha_l2,   sd_coef2,   years,   name_basin,   setPlabels )"},{"path":"https://calfarog.github.io/GREENeR/reference/compare_calib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot comparing observed vs modeled loads for two set of parameters — compare_calib","text":"catch_data data frame. Definition topological sequence catchments. annual_data data frame. Sources nutrient year catchments. alpha_p1 numeric. basin retention coefficient first set parameters. alpha_l1 numeric. river retention coefficient first set parameters. sd_coef1 numeric. Fraction domestic diffuse sources reaches stream network first set parameters. alpha_p2 numeric. basin retention coefficient second set parameters. alpha_l2 numeric. river retention coefficient second set parameters. sd_coef2 numeric. Fraction domestic diffuse sources reaches stream network second set parameters. years numeric. Years shown plot. name_basin character. Name basin (title plot). setPlabels character. Labels identifying set parameter.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/compare_calib.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot comparing observed vs modeled loads for two set of parameters — compare_calib","text":"scatter plot list two data frames model GREEN applied two model parameter sets","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/compare_calib.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot comparing observed vs modeled loads for two set of parameters — compare_calib","text":"","code":"# \\donttest{ # the data of the TN scenario data(catch_data_TN) data(annual_data_TN)  # the first set of parameters to assess the basin model alpha_p <- 35.09 alpha_l <- 0.02 sd_coef <- 0.2  # the second set of parameters to assess the basin model alpha_p2 <- 41.23 alpha_l2 <- 0.0015 sd_coef2 <- 0.6  # years in which the plot will we shown years <- 1990:2018  nameBasin <- \"Lay\"  # generating the scatter plot comparing two set of parameters observed # versus modeled loads by year setPlabels <- c(\"bestNSE\",\"bestR2\") compare_calib(catch_data_TN, annual_data_TN, alpha_p , alpha_l, sd_coef, alpha_p2, alpha_l2, sd_coef2, years, nameBasin, setPlabels) #> [1] \"Calculating year: 1990\" #> [1] \"Calculating year: 1991\" #> [1] \"Calculating year: 1992\" #> [1] \"Calculating year: 1993\" #> [1] \"Calculating year: 1994\" #> [1] \"Calculating year: 1995\" #> [1] \"Calculating year: 1996\" #> [1] \"Calculating year: 1997\" #> [1] \"Calculating year: 1998\" #> [1] \"Calculating year: 1999\" #> [1] \"Calculating year: 2000\" #> [1] \"Calculating year: 2001\" #> [1] \"Calculating year: 2002\" #> [1] \"Calculating year: 2003\" #> [1] \"Calculating year: 2004\" #> [1] \"Calculating year: 2005\" #> [1] \"Calculating year: 2006\" #> [1] \"Calculating year: 2007\" #> [1] \"Calculating year: 2008\" #> [1] \"Calculating year: 2009\" #> [1] \"Calculating year: 2010\" #> [1] \"Calculating year: 2011\" #> [1] \"Calculating year: 2012\" #> [1] \"Calculating year: 2013\" #> [1] \"Calculating year: 2014\" #> [1] \"Calculating year: 2015\" #> [1] \"Calculating year: 2016\" #> [1] \"Calculating year: 2017\" #> [1] \"Calculating year: 2018\" #> [1] \"Calculating year: 1990\" #> [1] \"Calculating year: 1991\" #> [1] \"Calculating year: 1992\" #> [1] \"Calculating year: 1993\" #> [1] \"Calculating year: 1994\" #> [1] \"Calculating year: 1995\" #> [1] \"Calculating year: 1996\" #> [1] \"Calculating year: 1997\" #> [1] \"Calculating year: 1998\" #> [1] \"Calculating year: 1999\" #> [1] \"Calculating year: 2000\" #> [1] \"Calculating year: 2001\" #> [1] \"Calculating year: 2002\" #> [1] \"Calculating year: 2003\" #> [1] \"Calculating year: 2004\" #> [1] \"Calculating year: 2005\" #> [1] \"Calculating year: 2006\" #> [1] \"Calculating year: 2007\" #> [1] \"Calculating year: 2008\" #> [1] \"Calculating year: 2009\" #> [1] \"Calculating year: 2010\" #> [1] \"Calculating year: 2011\" #> [1] \"Calculating year: 2012\" #> [1] \"Calculating year: 2013\" #> [1] \"Calculating year: 2014\" #> [1] \"Calculating year: 2015\" #> [1] \"Calculating year: 2016\" #> [1] \"Calculating year: 2017\" #> [1] \"Calculating year: 2018\"  #> [[1]] #>     HydroID To_catch Shreve LakeFrRet NrmLengthKm        BB  Year ObsLoad #>       <int>    <int>  <int>     <num>       <num>     <num> <int>   <num> #>  1:  368447       -1     95         0    0.064614 0.9987086  1990      NA #>  2:  368447       -1     95         0    0.064614 0.9987086  1991      NA #>  3:  368447       -1     95         0    0.064614 0.9987086  1992      NA #>  4:  368447       -1     95         0    0.064614 0.9987086  1993      NA #>  5:  368447       -1     95         0    0.064614 0.9987086  1994      NA #>  6:  368447       -1     95         0    0.064614 0.9987086  1995      NA #>  7:  368447       -1     95         0    0.064614 0.9987086  1996      NA #>  8:  368447       -1     95         0    0.064614 0.9987086  1997      NA #>  9:  368447       -1     95         0    0.064614 0.9987086  1998      NA #> 10:  368447       -1     95         0    0.064614 0.9987086  1999      NA #> 11:  368447       -1     95         0    0.064614 0.9987086  2000      NA #> 12:  368447       -1     95         0    0.064614 0.9987086  2001      NA #> 13:  368447       -1     95         0    0.064614 0.9987086  2002      NA #> 14:  368447       -1     95         0    0.064614 0.9987086  2003      NA #> 15:  368447       -1     95         0    0.064614 0.9987086  2004      NA #> 16:  368447       -1     95         0    0.064614 0.9987086  2005      NA #> 17:  368447       -1     95         0    0.064614 0.9987086  2006      NA #> 18:  368447       -1     95         0    0.064614 0.9987086  2007      NA #> 19:  368447       -1     95         0    0.064614 0.9987086  2008      NA #> 20:  368447       -1     95         0    0.064614 0.9987086  2009      NA #> 21:  368447       -1     95         0    0.064614 0.9987086  2010      NA #> 22:  368447       -1     95         0    0.064614 0.9987086  2011      NA #> 23:  368447       -1     95         0    0.064614 0.9987086  2012      NA #> 24:  368447       -1     95         0    0.064614 0.9987086  2013      NA #> 25:  368447       -1     95         0    0.064614 0.9987086  2014      NA #> 26:  368447       -1     95         0    0.064614 0.9987086  2015      NA #> 27:  368447       -1     95         0    0.064614 0.9987086  2016      NA #> 28:  368447       -1     95         0    0.064614 0.9987086  2017      NA #> 29:  368447       -1     95         0    0.064614 0.9987086  2018      NA #>     HydroID To_catch Shreve LakeFrRet NrmLengthKm        BB  Year ObsLoad #>     CatchToRiver CatchLoad #>            <num>     <num> #>  1:     33.13114  1701.421 #>  2:     45.54241  2070.467 #>  3:     46.52118  2239.774 #>  4:     43.14434  2278.514 #>  5:     79.71795  3910.796 #>  6:     39.08402  2464.784 #>  7:     34.13716  1925.848 #>  8:     36.70673  1973.427 #>  9:     63.64245  2941.943 #> 10:     88.07411  4373.750 #> 11:     92.42113  4621.346 #> 12:     73.95507  3856.415 #> 13:     60.27005  3412.434 #> 14:     39.98493  2417.657 #> 15:     33.19720  1929.296 #> 16:     21.49135  1161.280 #> 17:     58.60271  3075.569 #> 18:     41.85122  2377.628 #> 19:     56.87685  3206.906 #> 20:     39.61076  2410.989 #> 21:     39.89819  1943.695 #> 22:     27.16230  1823.550 #> 23:     48.01996  2590.699 #> 24:     52.93532  2676.479 #> 25:     62.69433  3598.337 #> 26:     32.41916  2084.286 #> 27:     31.52778  2167.381 #> 28:     21.12808  1393.209 #> 29:     53.70585  3069.471 #>     CatchToRiver CatchLoad #>  #> [[2]] #>     HydroID To_catch Shreve LakeFrRet NrmLengthKm        BB  Year ObsLoad #>       <int>    <int>  <int>     <num>       <num>     <num> <int>   <num> #>  1:  368447       -1     95         0    0.064614 0.9999031  1990      NA #>  2:  368447       -1     95         0    0.064614 0.9999031  1991      NA #>  3:  368447       -1     95         0    0.064614 0.9999031  1992      NA #>  4:  368447       -1     95         0    0.064614 0.9999031  1993      NA #>  5:  368447       -1     95         0    0.064614 0.9999031  1994      NA #>  6:  368447       -1     95         0    0.064614 0.9999031  1995      NA #>  7:  368447       -1     95         0    0.064614 0.9999031  1996      NA #>  8:  368447       -1     95         0    0.064614 0.9999031  1997      NA #>  9:  368447       -1     95         0    0.064614 0.9999031  1998      NA #> 10:  368447       -1     95         0    0.064614 0.9999031  1999      NA #> 11:  368447       -1     95         0    0.064614 0.9999031  2000      NA #> 12:  368447       -1     95         0    0.064614 0.9999031  2001      NA #> 13:  368447       -1     95         0    0.064614 0.9999031  2002      NA #> 14:  368447       -1     95         0    0.064614 0.9999031  2003      NA #> 15:  368447       -1     95         0    0.064614 0.9999031  2004      NA #> 16:  368447       -1     95         0    0.064614 0.9999031  2005      NA #> 17:  368447       -1     95         0    0.064614 0.9999031  2006      NA #> 18:  368447       -1     95         0    0.064614 0.9999031  2007      NA #> 19:  368447       -1     95         0    0.064614 0.9999031  2008      NA #> 20:  368447       -1     95         0    0.064614 0.9999031  2009      NA #> 21:  368447       -1     95         0    0.064614 0.9999031  2010      NA #> 22:  368447       -1     95         0    0.064614 0.9999031  2011      NA #> 23:  368447       -1     95         0    0.064614 0.9999031  2012      NA #> 24:  368447       -1     95         0    0.064614 0.9999031  2013      NA #> 25:  368447       -1     95         0    0.064614 0.9999031  2014      NA #> 26:  368447       -1     95         0    0.064614 0.9999031  2015      NA #> 27:  368447       -1     95         0    0.064614 0.9999031  2016      NA #> 28:  368447       -1     95         0    0.064614 0.9999031  2017      NA #> 29:  368447       -1     95         0    0.064614 0.9999031  2018      NA #>     HydroID To_catch Shreve LakeFrRet NrmLengthKm        BB  Year ObsLoad #>     CatchToRiver CatchLoad #>            <num>     <num> #>  1:     23.14125 1293.6883 #>  2:     32.64331 1576.3129 #>  3:     33.46017 1712.2320 #>  4:     31.17077 1758.4885 #>  5:     61.76098 3149.5454 #>  6:     27.83425 1901.5348 #>  7:     23.79050 1468.3185 #>  8:     25.59968 1508.4185 #>  9:     46.76645 2287.8286 #> 10:     67.74168 3547.2319 #> 11:     71.02417 3756.1303 #> 12:     55.20274 3084.4853 #> 13:     43.80820 2700.5121 #> 14:     27.67398 1868.9368 #> 15:     22.50316 1481.2119 #> 16:     14.20004  917.4339 #> 17:     42.67006 2428.6389 #> 18:     29.36715 1852.3738 #> 19:     41.49992 2552.5429 #> 20:     27.79424 1885.8581 #> 21:     27.92406 1507.2943 #> 22:     18.32771 1404.9894 #> 23:     34.04862 2006.0422 #> 24:     37.92479 2068.1885 #> 25:     46.11051 2863.6398 #> 26:     21.39909 1552.7467 #> 27:     20.59787 1609.6376 #> 28:     13.03652 1009.4803 #> 29:     37.72782 2342.0229 #>     CatchToRiver CatchLoad #>  # }"},{"path":"https://calfarog.github.io/GREENeR/reference/create_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Create levels — create_levels","title":"Create levels — create_levels","text":"function create levels data frame.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/create_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create levels — create_levels","text":"","code":"create_levels(df, no_sf)"},{"path":"https://calfarog.github.io/GREENeR/reference/create_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create levels — create_levels","text":"df, no_sf data frame.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/create_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create levels — create_levels","text":"list","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/create_lits_of_maps.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocessing data for scenario summary — create_lits_of_maps","title":"Preprocessing data for scenario summary — create_lits_of_maps","text":"function blah, blah, blah....","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/create_lits_of_maps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocessing data for scenario summary — create_lits_of_maps","text":"","code":"create_lits_of_maps(   hydroSf,   long_basin,   unit,   legend_position,   param_list,   style )"},{"path":"https://calfarog.github.io/GREENeR/reference/create_lits_of_maps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocessing data for scenario summary — create_lits_of_maps","text":"hydroSf data frame. long_basin numeric. longitude basin. unit character. unit data. legend_position numeric. indicates de position legend plot. (Default: 1) param_list list. list maps plot. style character. style plot.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/create_lits_of_maps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocessing data for scenario summary — create_lits_of_maps","text":"list maps","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/create_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Create map — create_map","title":"Create map — create_map","text":"function create tm map.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/create_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create map — create_map","text":"","code":"create_map(   hydroSf,   var_name,   style_map,   scale_barRefs,   scale_barTexts,   title,   palette,   legend_position = 1 )"},{"path":"https://calfarog.github.io/GREENeR/reference/create_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create map — create_map","text":"hydroSf data frame. var_name character. name data variable contains data frame style_map, scale_barRefs, scale_barTexts numeric. title character. title plot palette character. colors map legend_position numeric. indicates de position legend plot. (Default: 1)","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/create_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create map — create_map","text":"plot map basin","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/data_preparation.html","id":null,"dir":"Reference","previous_headings":"","what":"data_preparation — data_preparation","title":"data_preparation — data_preparation","text":"Prepare data launch green","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/data_preparation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"data_preparation — data_preparation","text":"","code":"data_preparation(catch_data, annual_data)"},{"path":"https://calfarog.github.io/GREENeR/reference/data_preparation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"data_preparation — data_preparation","text":"catch_data data frame. Definition topological sequence catchments. annual_data data frame. Sources nutrient year catchments.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/data_preparation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"data_preparation — data_preparation","text":"One list two data table","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/evolution_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Evolution plot — evolution_plot","title":"Evolution plot — evolution_plot","text":"function plot evolution data","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/evolution_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evolution plot — evolution_plot","text":"","code":"evolution_plot(   data,   title = NULL,   xaxis.title = NULL,   yaxis.title,   x,   y,   colour = NULL,   wrap = NULL )"},{"path":"https://calfarog.github.io/GREENeR/reference/evolution_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evolution plot — evolution_plot","text":"data data frame. title character. plot title xaxis.title character. title x axis yaxis.title character. title y axis x character. name variable data represent x axis y character. name variable data represent y axis colour character. name variable data represent colour wrap character. name variable data represent wrap","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/evolution_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evolution plot — evolution_plot","text":"return value, called side effect drawing plot","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/evolution_plot_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Evolution plot area — evolution_plot_area","title":"Evolution plot area — evolution_plot_area","text":"function blah, blah, blah....","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/evolution_plot_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evolution plot area — evolution_plot_area","text":"","code":"evolution_plot_area(   annual_data,   new_data,   title_plot = NULL,   xaxis.title = NULL,   yaxis.title,   x,   y,   colour = NULL,   wrap = NULL )"},{"path":"https://calfarog.github.io/GREENeR/reference/evolution_plot_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evolution plot area — evolution_plot_area","text":"annual_data, new_data data frame. title_plot character. plot title xaxis.title character. title x axis yaxis.title character. title y axis x character. name variable data represent x axis y character. name variable data represent y axis colour character. name variable data represent colour wrap character. name variable data represent wrap","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/evolution_plot_area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evolution plot area — evolution_plot_area","text":"plot","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/gof.html","id":null,"dir":"Reference","previous_headings":"","what":"GOF — gof","title":"GOF — gof","text":"GOF","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/gof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GOF — gof","text":"","code":"gof(sim, obs, na.rm = TRUE, digits = 2)"},{"path":"https://calfarog.github.io/GREENeR/reference/gof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GOF — gof","text":"sim numeric 'data.frame', 'matrix' 'vector' simulated values obs numeric 'data.frame', 'matrix' 'vector' observed values na.rm remove NA digits Number digits","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/gof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GOF — gof","text":"data frame","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/GREENeR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"GREENeR: Geospatial Regression Equation for European Nutrient Losses (GREEN) — GREENeR-package","title":"GREENeR: Geospatial Regression Equation for European Nutrient Losses (GREEN) — GREENeR-package","text":"package provides tools methods apply model Geospatial Regression Equation European Nutrient losses (GREEN; Grizzetti et al. (2005); Grizzetti et al. (2012); Grizzetti et al. (2021)) area interest R environment. package comprises functions assessing annual nutrient (nitrogen phosphorus) loads basin region interest, land river retention, contribution shares sources. brief description model, including sources parameters, can found end document. , package includes functions loading spatio-temporal data , calibrating basin parameters, performing advanced sensitivity analysis evaluate calibration results, visualizing model inputs outputs plots maps. package parallel-capable alleviate computational burden large basins.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/GREENeR-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"GREENeR: Geospatial Regression Equation for European Nutrient Losses (GREEN) — GREENeR-package","text":"Grizzetti, B., Bouraoui, F., De Marsily, G., & Bidoglio, G. (2005). statistical method source apportionment riverine nitrogen loads. Journal Hydrology, 304(1-4), 302-315. doi:10.1016/j.jhydrol.2004.07.036 Grizzetti, B., Bouraoui, F., De Marsily, G., (2008). Assessing nitrogen pressures European surface water. Global Biogeochem. Cycles 22.. Grizzetti, B., Bouraoui, F., & Aloe, . (2012). Changes nitrogen phosphorus loads European seas. Global Change Biology, 18(2), 769-782. doi:10.1111/j.1365-2486.2011.02576.x Grizzetti, B., Vigiak, O., Udias, ., Aloe, ., Zanni, M., Bouraoui, F., Pistocchi, ., Dorati, C., Friedland, R., De Roo, ., others & Bielza, M. (2021). EU policies reduce nutrient pollution European inland coastal waters. Global Environmental Change, 69, 102281. doi:10.1016/j.gloenvcha.2021.102281","code":""},{"path":[]},{"path":"https://calfarog.github.io/GREENeR/reference/GREENeR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"GREENeR: Geospatial Regression Equation for European Nutrient Losses (GREEN) — GREENeR-package","text":"Maintainer: C. Alfaro c.alfarog@gmail.com Authors: . Udias angeludias@gmail.com B. Grizzetti bruna.grizzetti@jrc.O. Vigiak Olga.VIGIAK@ec.europa.eu J. Gomez javier.gomez@urjc.es . Aloe alberto.aloe@jrc.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/green_shares.html","id":null,"dir":"Reference","previous_headings":"","what":"Geospatial Regression Equation parallel execution returning the source\r\napportionment — green_shares","title":"Geospatial Regression Equation parallel execution returning the source\r\napportionment — green_shares","text":"Run GREEN model selected parameter set returns nutrient load source catchments Basin.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/green_shares.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geospatial Regression Equation parallel execution returning the source\r\napportionment — green_shares","text":"","code":"green_shares(catch_data, annual_data, alpha_p, alpha_l, sd_coef, loc_years)"},{"path":"https://calfarog.github.io/GREENeR/reference/green_shares.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geospatial Regression Equation parallel execution returning the source\r\napportionment — green_shares","text":"catch_data data frame. Definition topological sequence catchments. annual_data data frame. Sources nutrient year catchments. alpha_p numeric. First model parameter, basin retention coefficient. alpha_l numeric. Second model parameter, river retention coefficient. sd_coef numeric. Third model parameter, fraction domestic diffuse sources reaches stream network. loc_years integer. Years model executed.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/green_shares.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geospatial Regression Equation parallel execution returning the source\r\napportionment — green_shares","text":"One object, data frame nutrient load source catchments Basin","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/green_shares.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geospatial Regression Equation parallel execution returning the source\r\napportionment — green_shares","text":"","code":"# \\donttest{ # the data of the TN scenario data(catch_data_TN) data(annual_data_TN) # the parameter to assess the basin model alpha_p <- 35.09 alpha_l <- 0.02 sd_coef <- 0.2 # year in which the model should be executed loc_years <- 1990:2018 # Computing the source apportionment basin_loads_s <- green_shares(catch_data_TN, annual_data_TN, alpha_p, alpha_l, sd_coef, loc_years) # }"},{"path":"https://calfarog.github.io/GREENeR/reference/gr_density_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Density plot — gr_density_plot","title":"Density plot — gr_density_plot","text":"function blah, blah, blah....","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/gr_density_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density plot — gr_density_plot","text":"","code":"gr_density_plot(df_plot, plot_index, basin_name, cSD)"},{"path":"https://calfarog.github.io/GREENeR/reference/gr_density_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density plot — gr_density_plot","text":"df_plot data frame. plot_index numeric. indexes plot basin_name character. name basin cSD numeric. standard deviation","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/gr_density_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density plot — gr_density_plot","text":"return value, called side effect drawing plot","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/input_maps.html","id":null,"dir":"Reference","previous_headings":"","what":"Map average load input by source — input_maps","title":"Map average load input by source — input_maps","text":"Map showing mean load input source","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/input_maps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map average load input by source — input_maps","text":"","code":"input_maps(   catch_data,   annual_data,   sh_file,   plot.type,   style_map = \"fisher\",   scale_barTextS = 0.7,   legend_position = 1 )"},{"path":"https://calfarog.github.io/GREENeR/reference/input_maps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map average load input by source — input_maps","text":"catch_data data frame. Definition topological sequence catchments. annual_data data frame. Sources nutrient year catchments. sh_file sf object. spatial information. plot.type character. Alternatives map: input load (kt) type divided year catchment. “gr1”: km2; “gr2”: year/km2. style_map character. Alternatives create intervals maps. Chosen style: one \"fixed\", \"sd\", \"equal\", \"pretty\", \"quantile\", \"kmeans\", \"hclust\", \"bclust\", \"fisher\", \"jenks\". scale_barTextS numeric. modify size text legend. legend_position numeric. Legend position: 1 (default): \"right\", \"bottom\"; 2: \"left\", \"\"; 3: \"right\", \"bottom\"; 4: \"right\", \"\".","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/input_maps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map average load input by source — input_maps","text":"return value, called side effect drawing plot","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/input_maps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map average load input by source — input_maps","text":"","code":"# \\donttest{ # the data of the TN scenario data(catch_data_TN) data(annual_data_TN) data(sh_file) # the Input Load Map by source type 1 (lines) input_maps(catch_data_TN, annual_data_TN, sh_file, plot.type = \"gr1\", legend_position = 2) #> Some legend labels were too wide. These labels have been resized to 0.61, 0.56, 0.51, 0.51. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger. #> Some legend labels were too wide. These labels have been resized to 0.61, 0.56, 0.51, 0.51. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger. #> Some legend labels were too wide. These labels have been resized to 0.61, 0.61. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger. #> Some legend labels were too wide. These labels have been resized to 0.61, 0.61, 0.61. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger. #> Some legend labels were too wide. These labels have been resized to 0.61, 0.61. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger. #> Some legend labels were too wide. These labels have been resized to 0.56, 0.51, 0.51, 0.51. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger. #> Some legend labels were too wide. These labels have been resized to 0.61, 0.61. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.  # the Input Load Map by source type 2 (lines & area) input_maps(catch_data_TN, annual_data_TN, sh_file, plot.type = \"gr2\", legend_position = 2) #> Some legend labels were too wide. These labels have been resized to 0.61. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.  # }"},{"path":"https://calfarog.github.io/GREENeR/reference/input_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot input load by source — input_plot","title":"Plot input load by source — input_plot","text":"grouped barplot representing average input load source whole basin three density plots showing distribution nutrient sources (7 nitrogen, 5 phosphorous).","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/input_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot input load by source — input_plot","text":"","code":"input_plot(annual_data, sh_file, basin_name, plot.type, coef_SD = 1)"},{"path":"https://calfarog.github.io/GREENeR/reference/input_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot input load by source — input_plot","text":"annual_data data frame. Sources nutrient year catchments. sh_file sf object. spatial information. basin_name character. title plot. plot.type character. Possible values: Bar plot (\"B\") Density plot (“D”). coef_SD numeric. standard deviation coefficient.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/input_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot input load by source — input_plot","text":"return value, called side effect drawing plot","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/input_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot input load by source — input_plot","text":"","code":"# the data of the TN scenario data(annual_data_TN) data(sh_file) # The name of the basin basin_name <- \"Lay\" # the barplot input_plot(annual_data = annual_data_TN, basin_name = basin_name, plot.type = \"B\")  # the density plots input_plot(annual_data_TN, sh_file, basin_name, \"D\")"},{"path":"https://calfarog.github.io/GREENeR/reference/input_Tserie.html","id":null,"dir":"Reference","previous_headings":"","what":"Time series of annual load inputs by source — input_Tserie","title":"Time series of annual load inputs by source — input_Tserie","text":"Creates time series plot showing basin inputs source","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/input_Tserie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time series of annual load inputs by source — input_Tserie","text":"","code":"input_Tserie(catch_data, annual_data, sh_file, basin_name, plot.type)"},{"path":"https://calfarog.github.io/GREENeR/reference/input_Tserie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time series of annual load inputs by source — input_Tserie","text":"catch_data data frame. Definition topological sequence catchments. annual_data data frame. Sources nutrient year catchments. sh_file sf object. spatial information. basin_name character. title plot plot.type character. Alternative plot: “gr1”: stacked area; “gr2”: lines & area.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/input_Tserie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time series of annual load inputs by source — input_Tserie","text":"time-series plot","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/input_Tserie.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time series of annual load inputs by source — input_Tserie","text":"","code":"# \\donttest{ # the data of the TN scenario data(catch_data_TN) data(annual_data_TN) data(sh_file) # The title of the plot plotTitle <- \"Time series for the Lay Basin\" # the time serie plot 1 (lines) input_Tserie(catch_data_TN, annual_data_TN, sh_file, plotTitle, \"gr1\")  #>    Year      Atm       Min      Man      Fix    Soil      Sd      Ps #> 1  1990 2368.655  9475.761 7206.448  980.660 710.572 228.832 264.982 #> 2  1991 2368.655  9537.716 6848.931  973.478 710.572 232.359 258.745 #> 3  1992 2368.655  8926.636 7252.064  983.411 710.572 235.871 252.501 #> 4  1993 2368.655  8110.271 6694.876  966.751 710.572 239.395 246.261 #> 5  1994 2368.655  7997.243 6808.781  974.072 710.572 242.921 240.025 #> 6  1995 2368.655  8181.465 7338.956  953.901 710.572 246.442 233.786 #> 7  1996 2368.655  8844.446 7652.924  960.771 707.256 250.014 242.098 #> 8  1997 2368.655  9437.624 6969.992 1041.698 707.256 253.585 250.396 #> 9  1998 2368.655  9571.559 6783.746 1067.070 707.256 257.159 258.713 #> 10 1999 2368.655  9464.981 6373.709 1033.864 707.256 260.731 267.031 #> 11 2000 2368.655 10274.285 6175.285 1058.550 707.256 264.303 275.334 #> 12 2001 2237.756 10125.767 5838.017 1108.548 707.256 260.173 271.173 #> 13 2002 2331.589  9389.796 6298.857 1098.650 707.256 256.037 267.022 #> 14 2003 2153.140  9233.165 6444.245 1133.518 707.256 251.909 262.856 #> 15 2004 2155.631  9236.933 6444.444 1068.532 698.816 247.774 258.701 #> 16 2005 2001.216  8853.631 6523.325 1028.451 698.816 243.647 254.537 #> 17 2006 2298.389  7699.787 6881.052 1040.433 698.816 250.083 248.314 #> 18 2007 2232.874  7734.114 6808.636  832.802 698.816 256.511 242.081 #> 19 2008 1976.205  7675.239 7043.609  822.709 698.816 262.940 235.853 #> 20 2009 2005.940  6501.220 7890.972  950.501 698.816 269.375 229.627 #> 21 2010 1984.635  7090.374 7556.557 1080.412 693.368 275.806 223.399 #> 22 2011 1893.324  7424.725 7370.638  785.436 693.368 251.701 216.747 #> 23 2012 1754.781  8302.023 6859.001  777.365 693.368 227.598 210.095 #> 24 2013 2139.887  7676.976 7087.049  777.717 693.368 203.500 203.451 #> 25 2014 1844.415  8405.641 6181.578  763.641 693.368 179.398 196.796 #> 26 2015 1915.282  8213.693 7349.732  830.229 693.368 155.295 190.150 #> 27 2016 1708.537  8217.358 7353.005  830.603 692.648 131.186 183.499 #> 28 2017 1664.011  6781.435 9418.740  831.584 692.648 131.186 183.499 #> 29 2018 2045.644  6781.435 9418.740  831.584 692.648 131.186 183.499 # the time serie plot 2 (lines & area) input_Tserie(catch_data_TN, annual_data_TN, sh_file, plotTitle, \"gr2\")  #> TableGrob (2 x 1) \"arrange\": 2 grobs #>   z     cells    name           grob #> 1 1 (1-1,1-1) arrange gtable[layout] #> 2 2 (2-2,1-1) arrange gtable[layout] #>    Year      Atm       Min      Man      Fix    Soil      Sd      Ps    Total #> 1  1990 2368.655  9475.761 7206.448  980.660 710.572 228.832 264.982 21235.91 #> 2  1991 2368.655  9537.716 6848.931  973.478 710.572 232.359 258.745 20930.46 #> 3  1992 2368.655  8926.636 7252.064  983.411 710.572 235.871 252.501 20729.71 #> 4  1993 2368.655  8110.271 6694.876  966.751 710.572 239.395 246.261 19336.78 #> 5  1994 2368.655  7997.243 6808.781  974.072 710.572 242.921 240.025 19342.27 #> 6  1995 2368.655  8181.465 7338.956  953.901 710.572 246.442 233.786 20033.78 #> 7  1996 2368.655  8844.446 7652.924  960.771 707.256 250.014 242.098 21026.16 #> 8  1997 2368.655  9437.624 6969.992 1041.698 707.256 253.585 250.396 21029.21 #> 9  1998 2368.655  9571.559 6783.746 1067.070 707.256 257.159 258.713 21014.16 #> 10 1999 2368.655  9464.981 6373.709 1033.864 707.256 260.731 267.031 20476.23 #> 11 2000 2368.655 10274.285 6175.285 1058.550 707.256 264.303 275.334 21123.67 #> 12 2001 2237.756 10125.767 5838.017 1108.548 707.256 260.173 271.173 20548.69 #> 13 2002 2331.589  9389.796 6298.857 1098.650 707.256 256.037 267.022 20349.21 #> 14 2003 2153.140  9233.165 6444.245 1133.518 707.256 251.909 262.856 20186.09 #> 15 2004 2155.631  9236.933 6444.444 1068.532 698.816 247.774 258.701 20110.83 #> 16 2005 2001.216  8853.631 6523.325 1028.451 698.816 243.647 254.537 19603.62 #> 17 2006 2298.389  7699.787 6881.052 1040.433 698.816 250.083 248.314 19116.87 #> 18 2007 2232.874  7734.114 6808.636  832.802 698.816 256.511 242.081 18805.83 #> 19 2008 1976.205  7675.239 7043.609  822.709 698.816 262.940 235.853 18715.37 #> 20 2009 2005.940  6501.220 7890.972  950.501 698.816 269.375 229.627 18546.45 #> 21 2010 1984.635  7090.374 7556.557 1080.412 693.368 275.806 223.399 18904.55 #> 22 2011 1893.324  7424.725 7370.638  785.436 693.368 251.701 216.747 18635.94 #> 23 2012 1754.781  8302.023 6859.001  777.365 693.368 227.598 210.095 18824.23 #> 24 2013 2139.887  7676.976 7087.049  777.717 693.368 203.500 203.451 18781.95 #> 25 2014 1844.415  8405.641 6181.578  763.641 693.368 179.398 196.796 18264.84 #> 26 2015 1915.282  8213.693 7349.732  830.229 693.368 155.295 190.150 19347.75 #> 27 2016 1708.537  8217.358 7353.005  830.603 692.648 131.186 183.499 19116.84 #> 28 2017 1664.011  6781.435 9418.740  831.584 692.648 131.186 183.499 19703.10 #> 29 2018 2045.644  6781.435 9418.740  831.584 692.648 131.186 183.499 20084.74 # }"},{"path":"https://calfarog.github.io/GREENeR/reference/input_Tserie_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Time series of annual load inputs by source and km2 — input_Tserie_area","title":"Time series of annual load inputs by source and km2 — input_Tserie_area","text":"Creates time series plot showing basin inputs source","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/input_Tserie_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time series of annual load inputs by source and km2 — input_Tserie_area","text":"","code":"input_Tserie_area(catch_data, annual_data, sh_file, basin_name, plot.type)"},{"path":"https://calfarog.github.io/GREENeR/reference/input_Tserie_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time series of annual load inputs by source and km2 — input_Tserie_area","text":"catch_data data frame. Definition topological sequence catchments. annual_data data frame. Sources nutrient year catchments. sh_file sf object. spatial information. basin_name character. title plot plot.type character. Alternative plot:  “gr1”:  stacked area km2; “gr2”  lines & area km2 Shreve.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/input_Tserie_area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time series of annual load inputs by source and km2 — input_Tserie_area","text":"time-series plot","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/input_Tserie_area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time series of annual load inputs by source and km2 — input_Tserie_area","text":"","code":"# \\donttest{ # the data of the TN scenario data(catch_data_TN) data(annual_data_TN) data(sh_file) # The title of the plot plotTitle <- \"Time series for the Lay Basin\" # the time serie plot 1 (by km2) input_Tserie(catch_data_TN, annual_data_TN, sh_file, plotTitle, \"gr1\")  #>    Year      Atm       Min      Man      Fix    Soil      Sd      Ps #> 1  1990 2368.655  9475.761 7206.448  980.660 710.572 228.832 264.982 #> 2  1991 2368.655  9537.716 6848.931  973.478 710.572 232.359 258.745 #> 3  1992 2368.655  8926.636 7252.064  983.411 710.572 235.871 252.501 #> 4  1993 2368.655  8110.271 6694.876  966.751 710.572 239.395 246.261 #> 5  1994 2368.655  7997.243 6808.781  974.072 710.572 242.921 240.025 #> 6  1995 2368.655  8181.465 7338.956  953.901 710.572 246.442 233.786 #> 7  1996 2368.655  8844.446 7652.924  960.771 707.256 250.014 242.098 #> 8  1997 2368.655  9437.624 6969.992 1041.698 707.256 253.585 250.396 #> 9  1998 2368.655  9571.559 6783.746 1067.070 707.256 257.159 258.713 #> 10 1999 2368.655  9464.981 6373.709 1033.864 707.256 260.731 267.031 #> 11 2000 2368.655 10274.285 6175.285 1058.550 707.256 264.303 275.334 #> 12 2001 2237.756 10125.767 5838.017 1108.548 707.256 260.173 271.173 #> 13 2002 2331.589  9389.796 6298.857 1098.650 707.256 256.037 267.022 #> 14 2003 2153.140  9233.165 6444.245 1133.518 707.256 251.909 262.856 #> 15 2004 2155.631  9236.933 6444.444 1068.532 698.816 247.774 258.701 #> 16 2005 2001.216  8853.631 6523.325 1028.451 698.816 243.647 254.537 #> 17 2006 2298.389  7699.787 6881.052 1040.433 698.816 250.083 248.314 #> 18 2007 2232.874  7734.114 6808.636  832.802 698.816 256.511 242.081 #> 19 2008 1976.205  7675.239 7043.609  822.709 698.816 262.940 235.853 #> 20 2009 2005.940  6501.220 7890.972  950.501 698.816 269.375 229.627 #> 21 2010 1984.635  7090.374 7556.557 1080.412 693.368 275.806 223.399 #> 22 2011 1893.324  7424.725 7370.638  785.436 693.368 251.701 216.747 #> 23 2012 1754.781  8302.023 6859.001  777.365 693.368 227.598 210.095 #> 24 2013 2139.887  7676.976 7087.049  777.717 693.368 203.500 203.451 #> 25 2014 1844.415  8405.641 6181.578  763.641 693.368 179.398 196.796 #> 26 2015 1915.282  8213.693 7349.732  830.229 693.368 155.295 190.150 #> 27 2016 1708.537  8217.358 7353.005  830.603 692.648 131.186 183.499 #> 28 2017 1664.011  6781.435 9418.740  831.584 692.648 131.186 183.499 #> 29 2018 2045.644  6781.435 9418.740  831.584 692.648 131.186 183.499 # the time serie plot 2 (by km2 and Shreve) input_Tserie(catch_data_TN, annual_data_TN, sh_file, plotTitle, \"gr2\")  #> TableGrob (2 x 1) \"arrange\": 2 grobs #>   z     cells    name           grob #> 1 1 (1-1,1-1) arrange gtable[layout] #> 2 2 (2-2,1-1) arrange gtable[layout] #>    Year      Atm       Min      Man      Fix    Soil      Sd      Ps    Total #> 1  1990 2368.655  9475.761 7206.448  980.660 710.572 228.832 264.982 21235.91 #> 2  1991 2368.655  9537.716 6848.931  973.478 710.572 232.359 258.745 20930.46 #> 3  1992 2368.655  8926.636 7252.064  983.411 710.572 235.871 252.501 20729.71 #> 4  1993 2368.655  8110.271 6694.876  966.751 710.572 239.395 246.261 19336.78 #> 5  1994 2368.655  7997.243 6808.781  974.072 710.572 242.921 240.025 19342.27 #> 6  1995 2368.655  8181.465 7338.956  953.901 710.572 246.442 233.786 20033.78 #> 7  1996 2368.655  8844.446 7652.924  960.771 707.256 250.014 242.098 21026.16 #> 8  1997 2368.655  9437.624 6969.992 1041.698 707.256 253.585 250.396 21029.21 #> 9  1998 2368.655  9571.559 6783.746 1067.070 707.256 257.159 258.713 21014.16 #> 10 1999 2368.655  9464.981 6373.709 1033.864 707.256 260.731 267.031 20476.23 #> 11 2000 2368.655 10274.285 6175.285 1058.550 707.256 264.303 275.334 21123.67 #> 12 2001 2237.756 10125.767 5838.017 1108.548 707.256 260.173 271.173 20548.69 #> 13 2002 2331.589  9389.796 6298.857 1098.650 707.256 256.037 267.022 20349.21 #> 14 2003 2153.140  9233.165 6444.245 1133.518 707.256 251.909 262.856 20186.09 #> 15 2004 2155.631  9236.933 6444.444 1068.532 698.816 247.774 258.701 20110.83 #> 16 2005 2001.216  8853.631 6523.325 1028.451 698.816 243.647 254.537 19603.62 #> 17 2006 2298.389  7699.787 6881.052 1040.433 698.816 250.083 248.314 19116.87 #> 18 2007 2232.874  7734.114 6808.636  832.802 698.816 256.511 242.081 18805.83 #> 19 2008 1976.205  7675.239 7043.609  822.709 698.816 262.940 235.853 18715.37 #> 20 2009 2005.940  6501.220 7890.972  950.501 698.816 269.375 229.627 18546.45 #> 21 2010 1984.635  7090.374 7556.557 1080.412 693.368 275.806 223.399 18904.55 #> 22 2011 1893.324  7424.725 7370.638  785.436 693.368 251.701 216.747 18635.94 #> 23 2012 1754.781  8302.023 6859.001  777.365 693.368 227.598 210.095 18824.23 #> 24 2013 2139.887  7676.976 7087.049  777.717 693.368 203.500 203.451 18781.95 #> 25 2014 1844.415  8405.641 6181.578  763.641 693.368 179.398 196.796 18264.84 #> 26 2015 1915.282  8213.693 7349.732  830.229 693.368 155.295 190.150 19347.75 #> 27 2016 1708.537  8217.358 7353.005  830.603 692.648 131.186 183.499 19116.84 #> 28 2017 1664.011  6781.435 9418.740  831.584 692.648 131.186 183.499 19703.10 #> 29 2018 2045.644  6781.435 9418.740  831.584 692.648 131.186 183.499 20084.74 # } # catch_data <- The_Scen[[1]] # annual_data <- The_Scen[[2]] # sh_file <- The_Sf_shape"},{"path":"https://calfarog.github.io/GREENeR/reference/LakeRetent_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Lake retention values summary — LakeRetent_plot","title":"Lake retention values summary — LakeRetent_plot","text":"Summary reference values stations","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/LakeRetent_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lake retention values summary — LakeRetent_plot","text":"","code":"LakeRetent_plot(catch_data_TN)"},{"path":"https://calfarog.github.io/GREENeR/reference/LakeRetent_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lake retention values summary — LakeRetent_plot","text":"catch_data_TN data frame. Sources nutrient year catchments.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/LakeRetent_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lake retention values summary — LakeRetent_plot","text":"barplot & histogram-density","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/LakeRetent_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lake retention values summary — LakeRetent_plot","text":"","code":"# \\donttest{ # the data of the TN scenario data(catch_data_TN) LakeRetent_plot(catch_data_TN)  # }"},{"path":"https://calfarog.github.io/GREENeR/reference/launch_green.html","id":null,"dir":"Reference","previous_headings":"","what":"GREEN execution — launch_green","title":"GREEN execution — launch_green","text":"Applies model GREEN (Grizzetti et al. [@grizzetti2012changes, @grizzetti2021eu]) basin returns annual nutrient (nitrogen phosphorus) load catchments basin","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/launch_green.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GREEN execution — launch_green","text":"","code":"launch_green(   catch_data,   annual_data,   alpha_p,   alpha_l,   sd_coef,   loc_years,   atm_coeff = 0.38 )"},{"path":"https://calfarog.github.io/GREENeR/reference/launch_green.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GREEN execution — launch_green","text":"catch_data data frame. Definition topological sequence catchments. annual_data data frame. Sources nutrient year catchments. alpha_p numeric. First model parameter, basin retention coefficient. alpha_l numeric. Second model parameter, river retention coefficient. sd_coef numeric. Third model parameter, fraction domestic diffuse sources reaches stream network. loc_years integer. Years model executed. atm_coeff numeric. defines atmospheric attenuation coefficient.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/launch_green.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GREEN execution — launch_green","text":"One object, data frame","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/load_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Load DA map — load_map","title":"Load DA map — load_map","text":"function creates tmap","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/load_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load DA map — load_map","text":"","code":"load_map(hydroSf, long_basin, title, style_map, legend_position = 1)"},{"path":"https://calfarog.github.io/GREENeR/reference/load_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load DA map — load_map","text":"hydroSf data frame. long_basin numeric. title string. title map style_map character. style map legend_position numeric. indicates de position legend plot. (Default: 1)","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/load_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load DA map — load_map","text":"plot map basin","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/load_SA_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Load SA map — load_SA_map","title":"Load SA map — load_SA_map","text":"function creates tmap","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/load_SA_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load SA map — load_SA_map","text":"","code":"load_SA_map(   hydroSf_merge,   refN_P,   long_basin,   unity,   style_map,   legend_position = 1 )"},{"path":"https://calfarog.github.io/GREENeR/reference/load_SA_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load SA map — load_SA_map","text":"hydroSf_merge data frame. refN_P numeric. number variables data frame long_basin numeric. unity character. units hydroSf style_map character. style map legend_position numeric. indicates de position legend plot. (Default: 1)","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/load_SA_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load SA map — load_SA_map","text":"plot map basin","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/multiple_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple Map — multiple_map","title":"Multiple Map — multiple_map","text":"function creates arrange tmap","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/multiple_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple Map — multiple_map","text":"","code":"multiple_map(hydroSf, refN_P, long_basin, unit, legend_position = 1)"},{"path":"https://calfarog.github.io/GREENeR/reference/multiple_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple Map — multiple_map","text":"hydroSf data frame. refN_P numeric. number variables data frame long_basin numeric. unit character. units hydroSf legend_position numeric. indicates de position legend plot. (Default: 1)","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/multiple_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiple Map — multiple_map","text":"plot map basin","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/N4_sankey.html","id":null,"dir":"Reference","previous_headings":"","what":"Nutrient balance flow plot — N4_sankey","title":"Nutrient balance flow plot — N4_sankey","text":"Nutrient balance flow Sankey plot","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/N4_sankey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nutrient balance flow plot — N4_sankey","text":"","code":"N4_sankey(Nbalance_out)"},{"path":"https://calfarog.github.io/GREENeR/reference/N4_sankey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nutrient balance flow plot — N4_sankey","text":"Nbalance_out data frame. Nutrient balance result Nutbalance() function","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/N4_sankey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nutrient balance flow plot — N4_sankey","text":"Sankey diagram data frame variable values","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/N4_sankey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nutrient balance flow plot — N4_sankey","text":"","code":"# \\donttest{ # the data of the TN scenario data(catch_data_TN) data(annual_data_TN) # the parameter to assess the basin model alpha_p <- 35.09 alpha_l <- 0.02 sd_coef <- 0.2 # years in which the model should be executed loc_years <- 1990:2018 # Computing the nutrient balance nut_bal <- region_nut_balance(catch_data_TN, annual_data_TN, alpha_p, alpha_l, sd_coef, loc_years) #> [1] \"Calculating year: 1990\" #> [1] \"Calculating year: 1991\" #> [1] \"Calculating year: 1992\" #> [1] \"Calculating year: 1993\" #> [1] \"Calculating year: 1994\" #> [1] \"Calculating year: 1995\" #> [1] \"Calculating year: 1996\" #> [1] \"Calculating year: 1997\" #> [1] \"Calculating year: 1998\" #> [1] \"Calculating year: 1999\" #> [1] \"Calculating year: 2000\" #> [1] \"Calculating year: 2001\" #> [1] \"Calculating year: 2002\" #> [1] \"Calculating year: 2003\" #> [1] \"Calculating year: 2004\" #> [1] \"Calculating year: 2005\" #> [1] \"Calculating year: 2006\" #> [1] \"Calculating year: 2007\" #> [1] \"Calculating year: 2008\" #> [1] \"Calculating year: 2009\" #> [1] \"Calculating year: 2010\" #> [1] \"Calculating year: 2011\" #> [1] \"Calculating year: 2012\" #> [1] \"Calculating year: 2013\" #> [1] \"Calculating year: 2014\" #> [1] \"Calculating year: 2015\" #> [1] \"Calculating year: 2016\" #> [1] \"Calculating year: 2017\" #> [1] \"Calculating year: 2018\" # Plot the sankey plot with the result of the balance sank <- N4_sankey(nut_bal) # }"},{"path":"https://calfarog.github.io/GREENeR/reference/nutrient_maps.html","id":null,"dir":"Reference","previous_headings":"","what":"Map average load output by source — nutrient_maps","title":"Map average load output by source — nutrient_maps","text":"Creates maps showing basin output total source loads","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/nutrient_maps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map average load output by source — nutrient_maps","text":"","code":"nutrient_maps(green_file, sh_file, plot.type, style, legend_position = 1)"},{"path":"https://calfarog.github.io/GREENeR/reference/nutrient_maps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map average load output by source — nutrient_maps","text":"green_file data frame GREEN model results green_shares() function. Nutrient Load source apportionment nutrient year catchments. sh_file sf object. spatial information basin. plot.type character. Alternatives map: “gr1”: output load (kt/y) source; “gr2”: Total Load, log10 (kt/y); “gr3”: Total Load km2 (kt/year/km2). style character. style plot. legend_position numeric. Legend position: 1 (default): \"right\", \"bottom\"; 2: \"left\", \"\"; 3: \"right\", \"bottom\"; 4: \"right\", \"\".","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/nutrient_maps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map average load output by source — nutrient_maps","text":"return value, called side effect drawing plot","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/nutrient_maps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map average load output by source — nutrient_maps","text":"","code":"# \\donttest{ # the data of the TN scenario data(catch_data_TN) data(annual_data_TN) data(sh_file) # the parameter to assess the basin model alpha_p <- 35.09 alpha_l <- 0.02 sd_coef <- 0.2 # years in which the model should be executed loc_years <- 1990:2018 # Computing the source apportionment basin_sa <- green_shares(catch_data_TN, annual_data_TN, alpha_p, alpha_l, sd_coef, loc_years) # Basin Output Load  Maps by source Lpos <- 1 nutrient_maps(basin_sa, sh_file, plot.type = \"gr1\", style = \"log10\", legend_position = Lpos)  # Basin Output Specific Load  Maps Lpos <- 1 nutrient_maps(basin_sa, sh_file, plot.type = \"gr2\", style = \"log10\", legend_position = Lpos)  # Basin Output Specific Load by km2 Maps Lpos <- 1 nutrient_maps(basin_sa, sh_file, plot.type = \"gr3\", style = \"fisher\", legend_position = Lpos)  # }"},{"path":"https://calfarog.github.io/GREENeR/reference/nutrient_tserie.html","id":null,"dir":"Reference","previous_headings":"","what":"Output load time series plot — nutrient_tserie","title":"Output load time series plot — nutrient_tserie","text":"Creates time series plot showing basin model results","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/nutrient_tserie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output load time series plot — nutrient_tserie","text":"","code":"nutrient_tserie(green_file, basin_name, plot.type, file_path = NULL)"},{"path":"https://calfarog.github.io/GREENeR/reference/nutrient_tserie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output load time series plot — nutrient_tserie","text":"green_file data frame. Nutrient Load source apportionment nutrient year catchments. basin_name character. title plot. plot.type character. Alternative plot: output load (t) source; gr1: Basin average Shreve (t/y/km2); gr2: Outlet total (kt/y). file_path character. path save csv.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/nutrient_tserie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Output load time series plot — nutrient_tserie","text":"return value, called side effect drawing plot","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/nutrient_tserie.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Output load time series plot — nutrient_tserie","text":"","code":"# \\donttest{ # the data of the TN scenario data(catch_data_TN) data(annual_data_TN) data(sh_file) # the parameter to assess the basin model alpha_p <- 35.09 alpha_l <- 0.02 sd_coef <- 0.2 # years in which the model should be executed loc_years <- 1990:2018 # Computing the source apportionment basin_sa <- green_shares(catch_data_TN, annual_data_TN, alpha_p, alpha_l, sd_coef, loc_years) # The title of the plot plotTitle <- \"Time series Load Output for the Lay Basin\" # Output Load Basin average time series (lines) nutrient_tserie(basin_sa, basin_name = plotTitle, plot.type = \"gr1\")  #>    Year      Atm       Fix       Man       Min       Ps       Sd      Soil #> 1  1990 190.9303  64.61898  474.8575  624.3903 255.4712 44.33087  46.82202 #> 2  1991 233.4380  83.09805  584.6387  814.1589 249.4621 45.01517  60.65587 #> 3  1992 256.7513  93.20258  687.3130  846.0203 243.4458 45.69655  67.34432 #> 4  1993 277.6698 100.70950  697.4262  844.8723 237.4334 46.38032  74.02251 #> 5  1994 473.8071 186.56647 1304.1032 1531.7324 231.4249 47.06442 136.09767 #> 6  1995 293.2375 105.37582  810.7215  903.7920 225.4138 47.74760  78.49564 #> 7  1996 220.1218  75.30828  599.8602  693.2554 233.4236 48.44145  55.43695 #> 8  1997 224.6186  83.66444  559.7981  757.9870 241.4201 49.13526  56.80359 #> 9  1998 329.5553 136.14534  865.5247 1221.2161 249.4346 49.82964  90.23738 #> 10 1999 499.5698 209.72768 1292.9584 1920.0479 257.4505 50.52356 143.47260 #> 11 2000 512.0912 220.39846 1285.7432 2139.1872 265.4517 51.21752 147.25629 #> 12 2001 415.5335 195.08910 1027.4101 1781.9948 261.5031 50.41715 124.46726 #> 13 2002 387.7962 170.65501  978.4117 1458.5322 257.5638 49.61568 109.85922 #> 14 2003 256.8299 120.24828  683.6318  979.4918 253.6106 48.81571  75.02860 #> 15 2004 206.9679  87.24304  526.1731  754.1731 249.6677 48.01440  57.05662 #> 16 2005 119.2931  45.03963  285.6801  387.7327 245.7161 47.21465  30.60369 #> 17 2006 366.3896 154.33610 1020.7236 1142.1734 239.8409 48.44384 103.66118 #> 18 2007 280.8776  93.93667  767.9862  872.3763 233.9561 49.67149  78.82357 #> 19 2008 336.6969 131.26730 1123.8435 1224.6232 228.0761 50.89926 111.49963 #> 20 2009 260.7587 111.15214  922.7750  760.2566 222.1981 52.12831  81.71997 #> 21 2010 204.9590  96.65786  676.0391  634.3326 216.3180 53.35651  62.03141 #> 22 2011 187.8603  66.43987  623.4805  628.0557 210.3823 48.67945  58.65184 #> 23 2012 243.0171  98.11778  865.7319 1047.8678 204.4463 44.00271  87.51578 #> 24 2013 307.0959 102.10793  930.4720 1007.9247 198.5181 39.32700  91.03359 #> 25 2014 363.9363 143.12927 1158.6136 1575.4699 192.5796 34.65051 129.95801 #> 26 2015 212.4315  80.42483  711.9735  795.6660 186.6495 29.97384  67.16703 #> 27 2016 199.9961  85.58774  757.6744  846.7398 180.7148 25.29609  71.37241 #> 28 2017 126.5836  49.76132  563.6101  405.7957 180.7148 25.29609  41.44752 #> 29 2018 318.1283 119.42053 1352.5877  973.8548 180.7148 25.29609  99.46842 #>    CatchLoad #> 1   1701.421 #> 2   2070.467 #> 3   2239.774 #> 4   2278.514 #> 5   3910.796 #> 6   2464.784 #> 7   1925.848 #> 8   1973.427 #> 9   2941.943 #> 10  4373.750 #> 11  4621.346 #> 12  3856.415 #> 13  3412.434 #> 14  2417.657 #> 15  1929.296 #> 16  1161.280 #> 17  3075.569 #> 18  2377.628 #> 19  3206.906 #> 20  2410.989 #> 21  1943.695 #> 22  1823.550 #> 23  2590.699 #> 24  2676.479 #> 25  3598.337 #> 26  2084.286 #> 27  2167.381 #> 28  1393.209 #> 29  3069.471 # Total Load in the Basin Outlet time series (lines) nutrient_tserie(basin_sa, basin_name = plotTitle, plot.type = \"gr2\")  #>    Year      Atm       Fix       Man       Min       Ps       Sd      Soil #> 1  1990 190.9303  64.61898  474.8575  624.3903 255.4712 44.33087  46.82202 #> 2  1991 233.4380  83.09805  584.6387  814.1589 249.4621 45.01517  60.65587 #> 3  1992 256.7513  93.20258  687.3130  846.0203 243.4458 45.69655  67.34432 #> 4  1993 277.6698 100.70950  697.4262  844.8723 237.4334 46.38032  74.02251 #> 5  1994 473.8071 186.56647 1304.1032 1531.7324 231.4249 47.06442 136.09767 #> 6  1995 293.2375 105.37582  810.7215  903.7920 225.4138 47.74760  78.49564 #> 7  1996 220.1218  75.30828  599.8602  693.2554 233.4236 48.44145  55.43695 #> 8  1997 224.6186  83.66444  559.7981  757.9870 241.4201 49.13526  56.80359 #> 9  1998 329.5553 136.14534  865.5247 1221.2161 249.4346 49.82964  90.23738 #> 10 1999 499.5698 209.72768 1292.9584 1920.0479 257.4505 50.52356 143.47260 #> 11 2000 512.0912 220.39846 1285.7432 2139.1872 265.4517 51.21752 147.25629 #> 12 2001 415.5335 195.08910 1027.4101 1781.9948 261.5031 50.41715 124.46726 #> 13 2002 387.7962 170.65501  978.4117 1458.5322 257.5638 49.61568 109.85922 #> 14 2003 256.8299 120.24828  683.6318  979.4918 253.6106 48.81571  75.02860 #> 15 2004 206.9679  87.24304  526.1731  754.1731 249.6677 48.01440  57.05662 #> 16 2005 119.2931  45.03963  285.6801  387.7327 245.7161 47.21465  30.60369 #> 17 2006 366.3896 154.33610 1020.7236 1142.1734 239.8409 48.44384 103.66118 #> 18 2007 280.8776  93.93667  767.9862  872.3763 233.9561 49.67149  78.82357 #> 19 2008 336.6969 131.26730 1123.8435 1224.6232 228.0761 50.89926 111.49963 #> 20 2009 260.7587 111.15214  922.7750  760.2566 222.1981 52.12831  81.71997 #> 21 2010 204.9590  96.65786  676.0391  634.3326 216.3180 53.35651  62.03141 #> 22 2011 187.8603  66.43987  623.4805  628.0557 210.3823 48.67945  58.65184 #> 23 2012 243.0171  98.11778  865.7319 1047.8678 204.4463 44.00271  87.51578 #> 24 2013 307.0959 102.10793  930.4720 1007.9247 198.5181 39.32700  91.03359 #> 25 2014 363.9363 143.12927 1158.6136 1575.4699 192.5796 34.65051 129.95801 #> 26 2015 212.4315  80.42483  711.9735  795.6660 186.6495 29.97384  67.16703 #> 27 2016 199.9961  85.58774  757.6744  846.7398 180.7148 25.29609  71.37241 #> 28 2017 126.5836  49.76132  563.6101  405.7957 180.7148 25.29609  41.44752 #> 29 2018 318.1283 119.42053 1352.5877  973.8548 180.7148 25.29609  99.46842 #>    CatchLoad #> 1   1701.421 #> 2   2070.467 #> 3   2239.774 #> 4   2278.514 #> 5   3910.796 #> 6   2464.784 #> 7   1925.848 #> 8   1973.427 #> 9   2941.943 #> 10  4373.750 #> 11  4621.346 #> 12  3856.415 #> 13  3412.434 #> 14  2417.657 #> 15  1929.296 #> 16  1161.280 #> 17  3075.569 #> 18  2377.628 #> 19  3206.906 #> 20  2410.989 #> 21  1943.695 #> 22  1823.550 #> 23  2590.699 #> 24  2676.479 #> 25  3598.337 #> 26  2084.286 #> 27  2167.381 #> 28  1393.209 #> 29  3069.471 # }"},{"path":"https://calfarog.github.io/GREENeR/reference/nutrient_tserie_darea.html","id":null,"dir":"Reference","previous_headings":"","what":"Output load time series plot — nutrient_tserie_darea","title":"Output load time series plot — nutrient_tserie_darea","text":"Creates time series plot showing basin model results","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/nutrient_tserie_darea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output load time series plot — nutrient_tserie_darea","text":"","code":"nutrient_tserie_darea(green_file, sh_file, basin_name)"},{"path":"https://calfarog.github.io/GREENeR/reference/nutrient_tserie_darea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output load time series plot — nutrient_tserie_darea","text":"green_file data frame. Nutrient Load source apportionment nutrient year catchments. sh_file sf object. spatial information. basin_name character. title plot.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/nutrient_tserie_darea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Output load time series plot — nutrient_tserie_darea","text":"return value, called side effect drawing plot","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/nutrient_tserie_darea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Output load time series plot — nutrient_tserie_darea","text":"","code":"# \\donttest{ # the data of the TN scenario data(catch_data_TN) data(annual_data_TN) data(sh_file) # the parameter to assess the basin model alpha_p <- 35.09 alpha_l <- 0.02 sd_coef <- 0.2 # years in which the model should be executed loc_years <- 1990:2018 # Computing the source apportionment basin_sa <- green_shares(catch_data_TN, annual_data_TN, alpha_p, alpha_l, sd_coef, loc_years) basin_name <- \"Visla Basin\" nutrient_tserie_darea(basin_sa, sh_file, basin_name)  # }"},{"path":"https://calfarog.github.io/GREENeR/reference/preproc_scenSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocessing data for scenario summary — preproc_scenSummary","title":"Preprocessing data for scenario summary — preproc_scenSummary","text":"function blah, blah, blah....","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/preproc_scenSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocessing data for scenario summary — preproc_scenSummary","text":"","code":"preproc_scenSummary(annual_data)"},{"path":"https://calfarog.github.io/GREENeR/reference/preproc_scenSummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocessing data for scenario summary — preproc_scenSummary","text":"annual_data data frame.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/preproc_scenSummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocessing data for scenario summary — preproc_scenSummary","text":"data frame total load year type","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/read_geometry.html","id":null,"dir":"Reference","previous_headings":"","what":"Read geometry — read_geometry","title":"Read geometry — read_geometry","text":"Function read geometry file.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/read_geometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read geometry — read_geometry","text":"","code":"read_geometry(file)"},{"path":"https://calfarog.github.io/GREENeR/reference/read_geometry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read geometry — read_geometry","text":"file string. string name extension geometry file.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/read_geometry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read geometry — read_geometry","text":"One object, sf file.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/read_NSdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Read NS data — read_NSdata","title":"Read NS data — read_NSdata","text":"Function read data return data frame GREEN execution.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/read_NSdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read NS data — read_NSdata","text":"","code":"read_NSdata(path, tsn, obs, ff, rain, topo, lr, length)"},{"path":"https://calfarog.github.io/GREENeR/reference/read_NSdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read NS data — read_NSdata","text":"path string. string path CSV files. tsn file. CSV file nine variables YearValue (integer), HydroID (integer), Atm (float), Min (float), Man (float), Fix (float), Soil (float), Sd (float) Ps (float). obs file. CSV file three variables YearValue (integer), HydroID (integer) YearlyMass (float). ff file. CSV file three variables YearValue (integer), HydroID (integer) ForestFraction (float). rain file. CSV file three variables YearValue (integer), HydroID (integer) Rain (float). topo file. CSV file two variables HydroID (integer) Next_HydroID (integer). lr file. CSV file three variables HydroID (integer), AvgDepth (float) ResTime (float). length file. CSV file two variables HydroID (integer) LengthKm (float).","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/read_NSdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read NS data — read_NSdata","text":"One object, list two data frame. First position list contains catch data second one annual data.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/read_NSdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read NS data — read_NSdata","text":"","code":"# \\donttest{ path <- \"https://raw.githubusercontent.com/calfarog/GREENeR_data/main/data/csv/\" ns_data <- read_NSdata(path, \"TS_nutrients.csv\", \"Obs_monitoring.csv\", \"ForestFr.csv\", \"Precipitation.csv\", \"Topology.csv\", \"LakeProperties.csv\", \"Length.csv\") # }"},{"path":"https://calfarog.github.io/GREENeR/reference/references_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Reference summary plot — references_plot","title":"Reference summary plot — references_plot","text":"Summary reference values stations","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/references_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reference summary plot — references_plot","text":"","code":"references_plot(annual_data)"},{"path":"https://calfarog.github.io/GREENeR/reference/references_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reference summary plot — references_plot","text":"annual_data data frame. Sources nutrient year catchments.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/references_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reference summary plot — references_plot","text":"barplot, histogram-density boxplot","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/references_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reference summary plot — references_plot","text":"","code":"# \\donttest{ # the data of the TN scenario data(annual_data_TN) references_plot(annual_data_TN)   # }"},{"path":"https://calfarog.github.io/GREENeR/reference/region_nut_balance.html","id":null,"dir":"Reference","previous_headings":"","what":"Nutrient balance based in the application of the Geospatial Regression\r\nEquation returning the diffuse, land retention, point sources — region_nut_balance","title":"Nutrient balance based in the application of the Geospatial Regression\r\nEquation returning the diffuse, land retention, point sources — region_nut_balance","text":"Computes basin nutrient balance.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/region_nut_balance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nutrient balance based in the application of the Geospatial Regression\r\nEquation returning the diffuse, land retention, point sources — region_nut_balance","text":"","code":"region_nut_balance(   catch_data,   annual_data,   alpha_p,   alpha_l,   sd_coef,   loc_years,   atm_coeff = 0.38 )"},{"path":"https://calfarog.github.io/GREENeR/reference/region_nut_balance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nutrient balance based in the application of the Geospatial Regression\r\nEquation returning the diffuse, land retention, point sources — region_nut_balance","text":"catch_data data frame. Definition topological sequence catchments. annual_data data frame. Sources nutrient year catchments. alpha_p numeric. First model parameter, basin retention coefficient. alpha_l numeric. Second model parameter, river retention coefficient. sd_coef numeric. Third model parameter, fraction domestic diffuse sources reaches stream network. loc_years integer. Years model executed. atm_coeff numeric. value atmospheric attenuation coefficient.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/region_nut_balance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nutrient balance based in the application of the Geospatial Regression\r\nEquation returning the diffuse, land retention, point sources — region_nut_balance","text":"One object, data frame basin nutrient balance","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/region_nut_balance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nutrient balance based in the application of the Geospatial Regression\r\nEquation returning the diffuse, land retention, point sources — region_nut_balance","text":"","code":"# \\donttest{ # the data of the TN scenario data(catch_data_TN) data(annual_data_TN) # the parameter to assess the basin model alpha_p <- 35.09 alpha_l <- 0.02 sd_coef <- 0.2 # year in which the model should be executed loc_years <- 1990:2018 # Computing the nutrient balance basin_loads_b <- region_nut_balance(catch_data_TN, annual_data_TN, alpha_p, alpha_l, sd_coef, loc_years) #> [1] \"Calculating year: 1990\" #> [1] \"Calculating year: 1991\" #> [1] \"Calculating year: 1992\" #> [1] \"Calculating year: 1993\" #> [1] \"Calculating year: 1994\" #> [1] \"Calculating year: 1995\" #> [1] \"Calculating year: 1996\" #> [1] \"Calculating year: 1997\" #> [1] \"Calculating year: 1998\" #> [1] \"Calculating year: 1999\" #> [1] \"Calculating year: 2000\" #> [1] \"Calculating year: 2001\" #> [1] \"Calculating year: 2002\" #> [1] \"Calculating year: 2003\" #> [1] \"Calculating year: 2004\" #> [1] \"Calculating year: 2005\" #> [1] \"Calculating year: 2006\" #> [1] \"Calculating year: 2007\" #> [1] \"Calculating year: 2008\" #> [1] \"Calculating year: 2009\" #> [1] \"Calculating year: 2010\" #> [1] \"Calculating year: 2011\" #> [1] \"Calculating year: 2012\" #> [1] \"Calculating year: 2013\" #> [1] \"Calculating year: 2014\" #> [1] \"Calculating year: 2015\" #> [1] \"Calculating year: 2016\" #> [1] \"Calculating year: 2017\" #> [1] \"Calculating year: 2018\" # }"},{"path":"https://calfarog.github.io/GREENeR/reference/scatter_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatter plot of goodness-of-fit metric vs parameters — scatter_plot","title":"Scatter plot of goodness-of-fit metric vs parameters — scatter_plot","text":"Scatter plot goodness--fit metric vs parameters","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/scatter_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatter plot of goodness-of-fit metric vs parameters — scatter_plot","text":"","code":"scatter_plot(df_cb, param)"},{"path":"https://calfarog.github.io/GREENeR/reference/scatter_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatter plot of goodness-of-fit metric vs parameters — scatter_plot","text":"df_cb data frame. table result calibration process. param character. Goodness fit metric:\"NSE\", \"rNSE\", \"NSE\", \"mNSE\", \"MAE\", \"PBIAS\", \"cp\", \"R2\",...","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/scatter_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scatter plot of goodness-of-fit metric vs parameters — scatter_plot","text":"Multiple scatter plot","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/scatter_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scatter plot of goodness-of-fit metric vs parameters — scatter_plot","text":"","code":"# \\donttest{ # the data of the TN scenario data(catch_data_TN) data(annual_data_TN) # the parameter for the calibration of the model n_iter <- 2 # number of iterations # the lower limits for all params (alpha_P, alpha_L, sd_coef) low <- c(10, 0.000, 0.1) # the upper limits for all params (alpha_P, alpha_L, sd_coef) upp <- c(70, 0.3,  0.9) # years in which the model should be executed years <- 1990:2018 # execution of the calibration df_calib <- calib_green(catch_data_TN, annual_data_TN, n_iter, low, upp, years) #> [1] \"Elapsed time: 9.06\" gof_mes <- \"NSE\" scatter_plot(df_calib, gof_mes)  # }"},{"path":"https://calfarog.github.io/GREENeR/reference/select_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Selection of best calibration parameters — select_params","title":"Selection of best calibration parameters — select_params","text":"Return best calibration parameter set according one goodness--fit metric","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/select_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Selection of best calibration parameters — select_params","text":"","code":"select_params(df_cb, param)"},{"path":"https://calfarog.github.io/GREENeR/reference/select_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Selection of best calibration parameters — select_params","text":"df_cb data frame. result calibration process. param numeric. Goodness--fit measures. \"NSE\", \"rNSE\", \"NSE\", \"mNSE\", \"MAE\", \"PBIAS\", \"cp\", \"R2\",...","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/select_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Selection of best calibration parameters — select_params","text":"vector 3 parameters","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/select_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Selection of best calibration parameters — select_params","text":"","code":"# \\donttest{ # the data of the TN scenario data(catch_data_TN) data(annual_data_TN) # the parameter for the calibration of the model n_iter <- 2 # number of iterations # the lower limits for all params (alpha_P, alpha_L, sd_coef) low <- c(10, 0.000, 0.1) # the upper limits for all params (alpha_P, alpha_L, sd_coef) upp <- c(70, 0.3,  0.9) # years in which the model should be executed years <- 1990:2018 # execution of the calibration df_calib <- calib_green(catch_data_TN, annual_data_TN, n_iter, low, upp, years) #> [1] \"Elapsed time: 7.81000000000006\" # Extract the best set of parameter according to a Goodnes of fit metric gof_mes <- \"NSE\" NSE_bestParams <- select_params(df_calib, gof_mes) # }"},{"path":"https://calfarog.github.io/GREENeR/reference/shreve.html","id":null,"dir":"Reference","previous_headings":"","what":"Shreve — shreve","title":"Shreve — shreve","text":"Function read data return data frame GREEN execution.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/shreve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shreve — shreve","text":"","code":"shreve(the_SC)"},{"path":"https://calfarog.github.io/GREENeR/reference/shreve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shreve — shreve","text":"the_SC table. table topology data.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/shreve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shreve — shreve","text":"One object, data frame shreve.","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/sh_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Sh file — sh_file","title":"Sh file — sh_file","text":"sf (simple features) object  includes attributes geometries form data frame. Data frame (tibble) rows features, columns attributes, special geometry column contains spatial aspects features","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/sh_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sh file — sh_file","text":"","code":"sh_file"},{"path":"https://calfarog.github.io/GREENeR/reference/sh_file.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sh file — sh_file","text":"Simple feature collection 6 features 14 fields: OBJECTID integer Identifier spatial object (one   catchment) HydroID integer Unique catchment identifier NextDownID integer Unique identifier catchment   catchment goes BasinID integer Identifier Basin  catchment   belong JunctionID integer Unique identifier catchment   catchment goes. Note outlet JunctionID == -1 AreaSqkm double Area catchment DrainAreaS double Drain Area catchment Shreve integer Indicates Shreve order, .e. headwater = 1;   outlet Shreve = max(Shreve) geometry sfc objects represent geometry single   feature contains information feature’s coordinates,   dimension, type geometry","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/simobs_annual_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Facet year plot — simobs_annual_plot","title":"Facet year plot — simobs_annual_plot","text":"function blah, blah, blah....","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/simobs_annual_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Facet year plot — simobs_annual_plot","text":"","code":"simobs_annual_plot(   catch_data,   annual_data,   alpha_p,   alpha_l,   sd_coef,   years,   name_basin,   maxvalue )"},{"path":"https://calfarog.github.io/GREENeR/reference/simobs_annual_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Facet year plot — simobs_annual_plot","text":"catch_data data frame. Definition topological sequence catchments. annual_data data frame. Sources nutrient year catchments. alpha_p numeric. First model parameter, basin retention coefficient. alpha_l numeric. Second model parameter, river retention coefficient. sd_coef numeric. Third model parameter, fraction domestic diffuse sources reaches stream network. years integer. Years used calibration. sequences use c(yearini:yearend). name_basin character. name basin maxvalue numeric. maximum value","code":""},{"path":"https://calfarog.github.io/GREENeR/reference/simobs_annual_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Facet year plot — simobs_annual_plot","text":"One object, data frame","code":""},{"path":"https://calfarog.github.io/GREENeR/news/index.html","id":"greener-100","dir":"Changelog","previous_headings":"","what":"GREENeR 1.0.0","title":"GREENeR 1.0.0","text":"CRAN release: 2024-02-01 Added new functions, generally summarize information Modified functions modularize code Parallelized simobs_annual_plot() function speed generation figure Fixed minor bugs","code":""},{"path":"https://calfarog.github.io/GREENeR/news/index.html","id":"greener-013","dir":"Changelog","previous_headings":"","what":"GREENeR 0.1.3","title":"GREENeR 0.1.3","text":"CRAN release: 2023-11-16 dependency hydroGOF package removed, since archived CRAN.","code":""},{"path":"https://calfarog.github.io/GREENeR/news/index.html","id":"greener-012","dir":"Changelog","previous_headings":"","what":"GREENeR 0.1.2","title":"GREENeR 0.1.2","text":"CRAN release: 2023-04-02 Solved warning messages calib_boxplot() function.","code":""},{"path":"https://calfarog.github.io/GREENeR/news/index.html","id":"greener-011","dir":"Changelog","previous_headings":"","what":"GREENeR 0.1.1","title":"GREENeR 0.1.1","text":"CRAN release: 2022-09-07 Add three new functions: read_NSdata(), read_geometry() shreve(). Change name function nut_balace() region_nut_balance(). Edit typos legend plots.","code":""},{"path":"https://calfarog.github.io/GREENeR/news/index.html","id":"greener-010","dir":"Changelog","previous_headings":"","what":"GREENeR 0.1.0","title":"GREENeR 0.1.0","text":"CRAN release: 2022-01-27 newer version may available https://github.com/calfarog/GREENeR get started, see package vignette “Geospatial Regression Equation European Nutrient losses (GREEN)” help files questions suggestions, please contact (c.alfarog gmail dot com)","code":""}]
